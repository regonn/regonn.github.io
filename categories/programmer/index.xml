<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programmer on そこのけそこのけゆとりが通る</title>
    <link>https://blog.regonn.tokyo/categories/programmer/</link>
    <description>Recent content in programmer on そこのけそこのけゆとりが通る</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 04 Dec 2019 09:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.regonn.tokyo/categories/programmer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自動読み上げプレゼンテーションシステム</title>
      <link>https://blog.regonn.tokyo/programmer/2019-12-04-auto-presentation/</link>
      <pubDate>Wed, 04 Dec 2019 09:00:00 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2019-12-04-auto-presentation/</guid>
      <description>できたもの(動画) 普段は、VTuber として趣味の俳句の動画を上げたりしています。 恋言-れごん - YouTube
VTuber が流行りだす少し前にも YouTube に動画を投稿していて、次のような問題を感じていました。
 言い間違いで何回も動画を撮りなおす 編集中に間違いに気づいて、そこの部分だけ撮り直したくなる  最近は、間違えてもそのままでいいかなと思うようになりましたが(何も問題は解決していないですが)
そこで私は
台本を用意して、キャラクターが読み上げてくれるプレゼンテーションシステムを作れば、この撮り直し地獄から抜け出せるのでは?
と思いました。
キャラクターが喋るようにプレゼンをしてくれて、台本なども git で管理できるようにしておけば修正も簡単になり、それを録画すれば動画ができるはずだと。
使った技術  reveal.js  ブラウザでプレゼンができるライブラリ   Amazon Polly  深層学習を利用した合成音声サービス    合成音声は VOICEROID のような製品も有りましたが、ブラウザ上で実現するため、API が用意されていて手頃な値段で使えるものということで、Polly を採用しました。
できたもの(コード) コード(公開用にライブラリ周りを最新のものに変更しました) https://github.com/regonn/reveal.js
必要なファイル  index.html(reveal.js を読み込んだり、Polly での発音の処理を書いてある) index.md(マークダウンでプレゼンの内容を記述する) scenarios(話す内容や、キャラの表情差分の画像ファイル指定等を json で管理しています。next が true の場合には、読み終わると次のスライドへ移動するようになっています)  結局楽になったのか? 実際にコンテンツを作ってみると、Polly の日本語の読み方やタイミングを修正しつつコンテンツを作らないといけなく、微調整などもスライドの最初から聞かないといけないため、結構大変でした。。。
そして、VTuber ブームもきて、動きがあるコンテンツが増えてきたこともあり、このシステムの様に動きが表情とポーズ差分ぐらいだと難しいのかなと思い、自分でも VTuber を初めて、こちらの開発は終わってしまいました。
最近、自分のリポジトリを整理してたら出てきて、せっかく作ったけど、もう利用していないので、この VNOS カレンダーで公開することにしました。
もし、なにか自動でプレゼンテーションをしてみたい人の参考になれば良いかなと思います。</description>
    </item>
    
    <item>
      <title>島根県松江市に 2018 年 3 月にIターンしてフリーランスになりました</title>
      <link>https://blog.regonn.tokyo/programmer/2018-12-05-matsue/</link>
      <pubDate>Wed, 05 Dec 2018 18:00:00 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2018-12-05-matsue/</guid>
      <description>この記事は IT 地方エンジニア Advent Calendar 2018 5 日目の記事です。
普段は Rails で Web 開発。趣味でデータサイエンスと VR 技術を触っていて Podcast とか VTuber の活動をしてます。れごんです。
今年の 3 月に島根県松江市に I ターンして、7 月からフリーランスになったので、そのことについて書いていこうと思います。
なぜ松江を選んだか？ 最も聞かれる質問ですね。 IT のエンジニアの方であれば松江が Ruby の聖地であることは有名ですが、それを知らない親族とかには不思議がられました。
なぜ松江(地方都市への I ターン)決めたのか改めて考えてみました。
松江に体験で仕事できる機会があった 総務省のお試しサテライトオフィスという企画で 2017 年の夏に 1 週間松江で仕事をすることができました。そのとき次のように感じ住むのにも良さそうと思いました。
 松江は都市がコンパクトに収まっている  現在も私は車も自転車も持っておらず、歩きだけで普段の生活(市役所への書類提出とか、勉強会等への参加)もできています 買い物も駅近くにイオンモールがあるため大抵の物は買える   Ruby の聖地ということで エンジニアコミュニティ が出来上がっている 大学(島根大学)や高専(松江工業高等専門学校)もあったりして、学生がイベント に参加してくる機会も多い 県庁所在地でもあるので、 市と県の人達の支援 が受けやすかったり、イベントが開催されている  松江・出雲がお茶処 東京にいるとき茶道をやっており、丁度通っていた教室の家元が松江の隣の市である出雲市にありました。 お茶にまつわる禅語の話など、色々と知識が入ってくるのが面白く、少し本格的にやってみるのもいいかもと思ってました。 現在も毎週出雲市へお稽古に通っています。
集中する(ひきこもれる)環境が欲しかった 普段色々なものに興味を持ってしまう性格(マルチポテンシャライトというらしい)なので、東京に住んでると色々なイベントやコミュニティに参加してしまって、自分の好きなタイミングで集中したいものに取り組むということができていませんでした。 そこで、 住む環境を地方に移しイベントやコミュニティ参加にもある程度制限をかけることで、自分の好きな物事に取り組める環境 が欲しくなりました。 その点、松江は集中したいものが自分の中にあれば、集中できる環境が整っている気がします。外にでて散歩をすれば、すぐ自然とも触れられる良い環境だと思います。
ギークハウスが新しくできた お試しサテライトのときにエンジニア向けのシェアハウスプロジェクトであるギークハウスを松江に作ろうと計画が進んでいました。 私も以前から幾つかのギークハウスで住んだこともあり興味がありました。現在もギークハウス松江に住んでいます。</description>
    </item>
    
    <item>
      <title>開発PCをMacBookProからManjaro Linuxのラップトップに乗り換えた</title>
      <link>https://blog.regonn.tokyo/programmer/2017-12-13-manjaro/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2017-12-13-manjaro/</guid>
      <description>Linux Advent Calendar 201713日目の記事
今年6月にMacBookProからManjaro Linuxに乗り換えたので感想とか書いてく。
すでに3日目の記事でlaughkさんが、Arch Linux のを一年使っている記事書いているので、そちらの方が参考になるかも。
続・ラフなラボ – ArchLinux なラップトップで仕事しはじめて大体1年経った
自分の状況(PC使用環境)  Webプログラマ Rails開発(Dockerは使わずにローカルに環境構築) リモートワーク中心で、ZoomとかGoogle Hangoutで会議することが多い Kaggleでデータサイエンス分野の処理やったりする(Julia言語) 趣味でYouTubeにプログラミングの動画とか投稿する  MacBookProの乗り換えに踏み切った理由  会社がパソコンの購入費用を出してくれるが会計処理の関係で30万まで  MacBookProをフルフルにカスタマイズすると30万円を超えてくるので悩む   Appleのイベントを待たないと新しいモデルが出ないので買い換えるタイミングが限定されたりするのにうんざりしてきた  次のイベントで最新モデルがでるかも =&amp;gt; 出ない (これの繰り返しがある)    買ったラップトップ 普段利用しているギーク向け?の口コミサイトslantというウェブサービスのWhat are the best laptops for Linuxというトピックで探してDellのXPS13を買うことに。
 日本でも買えるもの(たまに海外のPCベンダーだと技適通ってないものもあった) Dell なので買いたい時の一番良い組み合わせをカスタムすることができる 値段もフルフルに設定したけど20万ぐらいだった QiitaでもXPS13にLinuxを導入する記事があり情報が多そうだった  DELL XPS13 (9350 2015/11モデル)にUbuntu15.10をデュアルブートインストール(with Windows10) - Qiita    Manjaro Linux を選んだ理由  同じくslantでWhat are the best Linux distributions for laptops?</description>
    </item>
    
    <item>
      <title>Manjaro Linux の OBS で日本語が四角で表示されてしまう場合の対処方法</title>
      <link>https://blog.regonn.tokyo/programmer/2017-11-11-manjaro-obs/</link>
      <pubDate>Sat, 11 Nov 2017 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2017-11-11-manjaro-obs/</guid>
      <description>タイトルの通りですが、OBSで放送しようと思った時にTextを表示しようとしたら日本語が豆腐になっていたので解決する。
対処方法 日本語フォントをインストールすれば良さそうなので、notoフォントを入れる
$ sudo pacman -Sy noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra でインストールして、Select fontで &amp;ldquo;Noto Snas CJK JP&amp;rdquo; を指定したら正しく表示された。</description>
    </item>
    
    <item>
      <title>【Mac,Linux向け】 YouTubeLiveのコメントを読み上げてくれるWEBアプリ</title>
      <link>https://blog.regonn.tokyo/programmer/2017-08-31-youtube-live-comment-bouyomi-san/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2017-08-31-youtube-live-comment-bouyomi-san/</guid>
      <description>作った経緯 YouTubeLiveで配信することがたまにあり、コメントを読み上げてくれる棒読みちゃんみたいなソフトを探してた。
しかし、基本Windowsアプリだったり、htmlで動くのもあったけど、結局Windows環境でしか動かないようだったため、自分でMacやLinux環境でも使えるようにブラウザで実装してみた。
WebSpeachAPIというブラウザの機能で読み上げるようにしてあるので、最新のWEBブラウザだったら動くはず。
アプリ コチラで公開している。
※アクセスして、ブラウザが対応していると最初に音が出るので注意。
設定方法</description>
    </item>
    
    <item>
      <title>YouTubeLiveのコメントを読み上げてくれるツールをDartで書いてみた</title>
      <link>https://blog.regonn.tokyo/programmer/2017-08-27-dart-speech/</link>
      <pubDate>Sun, 27 Aug 2017 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2017-08-27-dart-speech/</guid>
      <description>モチベーション YouTubeでプログラミングのライブ配信するときに、ニコニコ生放送ではお馴染みの「棒読みちゃん」が欲しかった。 けど、Mac環境だと使い勝手が悪いのでYouTubeのAPIとWebSpeechAPI(音声合成)でWebブラウザで動く棒読みちゃんを自分で作ってみることに。
趣味でDartを勉強しているのとYouTubeはgoogleだし相性もいいかなと思ってDart実装にチャレンジしてみた。
名前は、棒読みちゃんよりWebSpeechAPIの音声の人の方がしっかりした声なので、棒読みさんと名付ける。
regonn/bouyomi-san-youtube-live.dart
ローカルにDart環境が揃っていれば、Dart project scaffolding generatorのstagehandを使って web-simple モードで生成すればすぐに開発が始められる。
コード main.dart import &amp;#39;dart:html&amp;#39;; import &amp;#39;dart:async&amp;#39;; import &amp;#39;package:googleapis_auth/auth_browser.dart&amp;#39; as auth; import &amp;#39;package:googleapis/youtube/v3.dart&amp;#39; as youtube; DateTime lastMessagedAt = new DateTime.now(); void main() { InputElement apiKeyInput = querySelector(&amp;#39;#api-key&amp;#39;); InputElement channelIdInput = querySelector(&amp;#39;#channel-id&amp;#39;); ButtonElement setButton = querySelector(&amp;#39;#set-button&amp;#39;); displayOutput(&amp;#39;APIキーとチャンネルを設定してください。&amp;#39;); speak(&amp;#39;起動しました。エーピーアイキーとチャンネルを設定してください。&amp;#39;); setButton.onClick.listen((_) { var apiKey = apiKeyInput.value; var client = auth.clientViaApiKey(apiKey); var api = new youtube.YoutubeApi(client); api.search.list(&amp;#34;id&amp;#34;, channelId: channelIdInput.value, type: &amp;#39;video&amp;#39;, eventType: &amp;#39;live&amp;#39;) .</description>
    </item>
    
    <item>
      <title>MacOSX で fork: Resource temporarily unavailable エラーになる場合の対処法</title>
      <link>https://blog.regonn.tokyo/programmer/2017-02-03-mac-osx-process/</link>
      <pubDate>Fri, 03 Feb 2017 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2017-02-03-mac-osx-process/</guid>
      <description>最近 Rails 開発で puma-dev とかを入れていると、fsevent_watch プロセスが量産されて、プロセス上限数に達し
fork: Resource temporarily unavailable というエラーが出て開発が中断される。
色々なところで議論もされていて、まだ根本的な解決はされていない様子
 fork: Resource temporarily unavailable occurring since installing · Issue #56 · puma/puma-dev The listen gem breaks my laptop · Issue #26158 · rails/rails  listen gem を削除したり development.rb を修正する必要があるみたいだけど、Railsアプリのコードをいじってしまうと他の人の開発環境にも影響が出るので、自分の Mac のプロセス上限を上げることに。
以前の MacOSX だと、 /etc/launchd.conf をいじれば良さそうだったけど、Sierraではそんなファイルが存在していなく、調べると
Open Files Limit
という記事で、次の2つのファイルを作ることで対応できるみたい。
/Library/LaunchDaemons/limit.maxfiles.plist &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;limit.maxfiles&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;launchctl&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;limit&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;maxfiles&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;200000&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;200000&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;ServiceIPC&amp;lt;/key&amp;gt; &amp;lt;false/&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt; /Library/LaunchDaemons/limit.</description>
    </item>
    
    <item>
      <title>家を仕事場にしてみよう 住み込み型ワークプレイス</title>
      <link>https://blog.regonn.tokyo/programmer/2016-12-08-work-place/</link>
      <pubDate>Thu, 08 Dec 2016 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-12-08-work-place/</guid>
      <description>たまたま知った カレシ・カノジョできないエンジニア Advent Calendar 2016 しかし、明日(12月8日)が埋まってない！ ということで、彼氏・彼女がいないからこそできる家を仕事場にして会社に提供している話を酒に酔った勢いで書いてみました。
リモートワーク 最近はリモートワークのニュースやブログ記事もちょくちょく出てきますね。 リモートワークは通勤がなくなるなどメリット満載ですが、私のように入社3年ぐらいの若手？で独身彼女無しだと勝手が違ってきます。
 リモートワークをすると家に他に誰もいないのでリアルで人と会う機会が減ってくる 日中家にいるので光熱費が高くなる 会社からちゃんと仕事してるか疑われる  それを解決するのが 住み込み型ワークプレイス です。これは、 他のリモートワークの人を呼んで自分の家を仕事場にしてしまう 方法です。
経緯 私の働いているソニックガーデンでは6月頃オフィスの引っ越しがありました。 社員が増えたので物理的なオフィスをやめました 〜 これからは「分散型ワークプレイス」へ | Social Change! 記事の中でも書かれていますが、ちょうど町田近辺で他の社員の人がリモートワークできる場所を探してました。 オフィスが家から遠くなり、せっかくなので町田に引っ越してリモートワークを実践してみました。  こんな感じで自分含め最大3人まで作業できる環境
感じたメリット  人との会話が増える 食費・光熱費が節約できて広い部屋を借りられる リモートワークのメリットをそのまま継承できる 会社も安心してリモートワークを実践できる  人との会話が増える これは、そのままですが、社員の人が家にくるため、自然と会話が生まれます。もう、これで寂しくないです。
食費光熱費が節約できて広い部屋を借りられる 会社との契約にもよりますが、自分の部屋を会社に貸しているので、家賃と光熱費の補助が受けられます。
会社的にも、利用する社員数×交通費やコワーキングスペースを借りるより、補助の方が安くなると説得できればオッケーも出やすいかも。
食費も自炊する機会が増えるので減ってきます。  最近もキャベツの芯を味噌汁に入れると美味しく食べられることに気がつきました。
リモートワークのメリットをそのまま継承できる やっていることはリモートワークなので、そのままリモートワークのメリットも受けられます。  この前の11月にあった寒い雪の日には家で作業しながら甘酒飲んだり  こたつでヌクヌク作業ができます。
デメリット 家に彼氏・彼女を連れ込めない よく「この状態だと家に彼女を連れ込めないね」と言われます。それでも大丈夫です。彼女できませんから。。。
まとめ 彼氏・彼女がいないなら、家を住み込み型ワークプレイスにすると色々捗るという話。</description>
    </item>
    
    <item>
      <title>Jekyll で作ったブログに AMP を導入してスマホ表示を高速化を動画で解説</title>
      <link>https://blog.regonn.tokyo/programmer/2016-11-24-jekyll-amp/</link>
      <pubDate>Thu, 24 Nov 2016 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-11-24-jekyll-amp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ときどきナガノ でリモートワークをしてみた 上田・松本編</title>
      <link>https://blog.regonn.tokyo/programmer/2016-11-18-tokidoki-nagano/</link>
      <pubDate>Fri, 18 Nov 2016 21:00:00 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-11-18-tokidoki-nagano/</guid>
      <description>ときどきナガノ という企画で長野でリモートワークを試してみることにしました。 全部で4回行く予定で、今回は上田市と松本市に行ってきたので、リモートワークの1日がどんな感じだったかをまとめていきます。
ときどきナガノ 長野県が主催する企画で、ITに関連する業務を行なっている人を対象にして選考し、 選ばれた人は約半年の間に4回程度、長野に行きコワーキングスペースでリモートワークをします。その費用の一部を県が負担してくれるというものです。 県側も長野の魅力を知ってもらったり、働いている人も1日のちょっとしたリモートワークを体験できたり、そのまま長野を旅行することができます。
自己紹介 私は株式会社ソニックガーデンで働いているWebプログラマです。 ソニックガーデンではリモートワークを積極的に取り入れており、代表の倉貫がリモートワークに関する本を出版していたり、 RemottyやF-Chair+といった、リモートワークに必要なツールを開発しています。
私自身も週に1回だけ自由が丘のオフィスへ行き、普段は町田の自宅(兼ワークプレイスという位置付け)で働いています。 日頃からリモートワークを実践しているので、 長野へ旅をしながらのリモートワークしても何もやることは変わらないのでは？ と思い ときどきナガノ に応募してみました。
移動中でもリモートワーク まずは当日、目的地の長野へ向かいます。上田には新幹線、松本には 特急あずさ で向かいました。 どちらも運良く席が確保できたので、早速車内でリモートワークをすることに。 基本的に作業はできましたが、長野に向かう途中はトンネルが多いのでネット通信を定期的に使うような作業には向いてませんでした。

画面に映っているのはRemottyです。Remottyを使うことで、他の人が実際に作業しているのか(声をかけられるのか)がわかったり、 自分専用のチャットルームが用意されているので、私に用がある人はこのチャットに来て書き込んできます。
腹ごしらえ 午前中かお昼に目的地へ着けるので旅行気分で昼食から始まります。
長野といえば蕎麦だったりソースカツ丼が有名なので、ググって良さそうな店を調べます。
旅をしながらのリモートワークだとこういった、お昼の過ごし方もできるので素晴らしいですね。
 上田駅近く&amp;quot;刀屋&amp;quot;の蕎麦(これで並盛り)
コワーキングスペースで作業 お昼を食べたら、食後の運動も兼ねて散策しながらコワーキングスペースへ向かいます。
 道中も綺麗な景色に出会えます
今回、コワーキングスペースは
 上田ではHanaLab Camp (FBページ) 松本ではKnowers (FBページ)  で作業を行いました。
基本コワーキングのドロップイン(当日のみ利用)であれば相場は 1000円程度 で利用できます。 その値段で、Wifi・電源使い放題(フリードリンクのところも)なのでかなり助かります。
 松本のコワーキングスペースKnowers
どこもオシャレな内装のところが多いです。
ミーティングもリモートで ミーティングもリモートで行います。ソニックガーデンでWEB会議には &amp;ldquo;appear.in&amp;rdquo; &amp;ldquo;Google ハングアウト&amp;rdquo; &amp;ldquo;Zoom&amp;rdquo; をよく利用しています。 今回はネイティブのアプリでブラウザが重くならないZoomを使ってミーティングしました。  画面共有を行いコードを見てもらっている
仕事が終わったら だいたい就業時間が終わると19時ぐらいなので、比較的時間に余裕があります。 観光地が近いので、上田の時はローカル線に乗って別所温泉に行くことに。 
夜も楽しむ(もちろんプログラミング) 温泉に入っても夜はまだまだこれから、PC作業ができる場所を探します。
長野なので日本酒を飲みたい気もしますが、飲み屋だと作業はしにくいので、そういう時は夜遅くまでやっているカフェに行ったりします。</description>
    </item>
    
    <item>
      <title>FXシステムトーレードツール jiji を Digital Oceanで動かす</title>
      <link>https://blog.regonn.tokyo/programmer/2016-10-26-jiji-tensorflow/</link>
      <pubDate>Wed, 26 Oct 2016 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-10-26-jiji-tensorflow/</guid>
      <description>目的 TensorFlow を使った為替(FX)のトレードシステムを作るチュートリアル ～システムのセットアップからトレードまで～ で公開されているサンプルコードを実行してみて、トレードの成績は良いものの、取引回数が減ってしまうので、複数通貨で取引できるようにしてみた。さらに今回は Digital Ocean VPS で実際に動かすところまでやってみる。
※ 実際の取引は自己責任でお願いしますね。
取引 Agent のコード サンプルコードを参考に複数通貨対応していった感じ。Tensorflow 側のコードはいじってないです。 ちょっとログを出力する関係でイマイチな部分もある。 Currency クラスを作ってそのインスタンスを複数持つことで対応した。
# tensorflow_agent.rb # coding: utf-8 require &amp;#39;jiji/model/agents/agent&amp;#39; require &amp;#39;httpclient&amp;#39; require &amp;#39;json&amp;#39; # ここで通貨ペアを複数指定。ただし、jiji上で同時にバックテストができるのは5通貨ペアまで。 TRADE_CURRENCIES = %i(USDJPY EURUSD USDJPY).freeze # 通貨単位。最高で 通貨ペア×通貨単位 分保有することがあるので調整してください。 CURRENCY_UNIT = 10000 TENSORFLOW_API_URL = &amp;#34;http://tensorflow:5000/api/estimator&amp;#34;.freeze class TensorFlowAgent include Jiji::Model::Agents::Agent def self.description &amp;lt;&amp;lt;-STR TensorFlowと連携してトレードするエージェントのサンプル STR end def self.property_infos [ Property.new(&amp;#39;exec_mode&amp;#39;, &amp;#39;動作モード(&amp;#34;collect&amp;#34; or &amp;#34;trade&amp;#34; or &amp;#34;test&amp;#34;)&amp;#39;, &amp;#34;collect&amp;#34;) ] end def post_create @mode = create_mode(@exec_mode) @currencies = TRADE_CURRENCIES.</description>
    </item>
    
    <item>
      <title>Line Messaging APIを利用してRubyとHerokuで雑談Botを作成</title>
      <link>https://blog.regonn.tokyo/programmer/2016-10-23-line-bot/</link>
      <pubDate>Sun, 23 Oct 2016 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-10-23-line-bot/</guid>
      <description>はじめに 近々、優勝賞金1000万円の LINE BOT AWARDS が開催されるらしいので、準備がてら雑談BOTを作ってみることに。
利用したサービス  Line Messaging API Ruby Heroku UserLocal人工知能ボットAPI  実際のコード リポジトリ GitHub regonn/line-bot-ruby-heroku で公開しています。 Heroku ボタンも用意したので皆さんの Heroku にデプロイできるようになっています。
実際に動かす場合には、Herokuの環境変数に Line Developers 画面で取得した LINE_CHANNEL_SECRET と LINE_CHANNEL_TOKEN あと、 User Local で取得した USR_LOCAL_API_KEY の設定が必要です。
コードの解説 app.rb require &amp;#39;sinatra&amp;#39; require &amp;#39;line/bot&amp;#39; require &amp;#39;rest-client&amp;#39; def client @client ||= Line::Bot::Client.new { |config| config.channel_secret = ENV[&amp;#34;LINE_CHANNEL_SECRET&amp;#34;] config.channel_token = ENV[&amp;#34;LINE_CHANNEL_TOKEN&amp;#34;] } end def get_user_local_bot_reply(word) response = RestClient.get &amp;#39;https://chatbot-api.userlocal.jp/api/chat&amp;#39;, { params: { key: ENV[&amp;#39;USR_LOCAL_API_KEY&amp;#39;], message: CGI.</description>
    </item>
    
    <item>
      <title>Meguro.es #6 で発表しました。</title>
      <link>https://blog.regonn.tokyo/programmer/2016-10-13-meguro-es6/</link>
      <pubDate>Thu, 13 Oct 2016 21:00:00 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-10-13-meguro-es6/</guid>
      <description>Meguro.es #6 で発表しました。
発表資料
オープンソースで運営されているプログラミング学習サイトの FreeCodeCamp の説明と、ECMAScriptがプログラミング初心者の最初に学ぶ言語として適しているのかについて考えました。</description>
    </item>
    
    <item>
      <title>【動画付き】freeCodeCamp Tokyo 勉強会 #17 の開催レポート</title>
      <link>https://blog.regonn.tokyo/programmer/2016-06-28-free-code-camp-tokyo-17/</link>
      <pubDate>Tue, 28 Jun 2016 08:34:01 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-06-28-free-code-camp-tokyo-17/</guid>
      <description>前回、今までの勉強会開催の反省記事を書きました。
オープンソースベースのプログラミング学習サービス freeCodeCamp の東京コミュニティを立ち上げて1年弱が経つので、勉強会の振り返り
2016/06/27 おこなった freeCodeCamp Tokyo の勉強会では反省を生かして、ペアプログラミングなどを取り入れてみました。今回は、その勉強会のレポート記事です。
勉強会の雰囲気 イベントの冒頭部分を動画で撮ったのと、発表資料を共有しておきます。
動画 
発表スライドリンク
所感 場所 今まで使っていたソニックガーデンの渋谷オフィスが移転に伴って、使えなくなったので、今回から渋谷にある株式会社フォークさんのオフィスをお借りして開催しました。オシャレな空間で場所も広いので、ペアプロ中に他のペアの人達の声も特に気にならずに作業ができました。
ペアプロ導入 ランダムに組んでペアプログラミングをしてもらいましたが、それなりに良かったかなと思います。普段の勉強会だと、他の人と交流することもなく終わってしまう場合もあるので、コードについて話せる機会ができているといいですね。
問題の難しさ 今回は、 steamroller という、freeCodeCamp の問題を解いてもらいました。freeCodeCamp のコンテンツを利用することで、私たち側の用意に時間が掛からないのと、実際に freeCodeCamp の学習が一つ終わるので良さそうでした。ただ、今回選んだ steamroller は再帰処理などの少し難しい問題だったので、次回やるときには難易度の異なる問題を2種類用意しておいて、先に簡単な方をやってもらって、そのあとにストレッチ問題として挑戦してもらうと、とりあえず発表できる内容ができるのでいいのかなと思います。
参加条件を設定 今回は特に参加の条件は設けませんでした、3名ほどプログラミングをやったことがない人も参加していただいて、その人達同士で組まないようにペアを組みましたが、さすがにプログラミングの概念から説明していると、時間内に問題解くには時間が足りなくなってしまうのと、勉強会の目的は ペアプロを通してより良い Javascript の書き方を身につける としているので、最低限 freeCodeCamp に登録してもらって、Basic Javascript のコンテンツが終わっている or そこまでの知識があることを参加条件にしようかなと考えています。参加のハードルを上げてしまっていますが、学習しようとする意欲のある人が集まるので問題なさそう。もし、人が来なくなっても、私自身の freeCodeCamp の学習を進める時間にすればいいだけだし。。。
配信 今回は、Hangout onair でも配信をしてみましたが、やっぱりペアプログラミング中は何もない時間になってしまうので、録画だけにして後から動画公開でも良さそう?
今後の予定 実際やってみて、わかったこともあったので今後も改善していきながら月1ぐらいのペースで勉強会を開催していきたいです。</description>
    </item>
    
    <item>
      <title>freeCodeCampの東京コミュニティを立ち上げて1年弱が経つので振り返り</title>
      <link>https://blog.regonn.tokyo/programmer/2016-06-11-free-code-camp-tokyo/</link>
      <pubDate>Sat, 11 Jun 2016 19:21:13 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2016-06-11-free-code-camp-tokyo/</guid>
      <description>最初に宣伝させてもらいますと、freeCodeCamp というサービスを御存知ですか？
オープンソースベースの無料でプログラミング(javascript)が学習できるサービスです。
コードは全て、githubで管理されていて、プロジェクトも全てgithub issueを使って運営されています。利用者が実際に、フィードバックを書いて貢献できるところも素晴らしいです。私も実際にissueを立てたりして貢献できています。Issue #7409 FreeCodeCamp/FreeCodeCamp
よくある企業が提供する有料のプログラミング学習サービスとは違い、貢献する人の数が違うので、学習内容も頻繁にアップデートされ、モダンなプログラミングを学ぶことができます。私がやっているこの1年間でも何回もアップデートが繰り返し行われ、学習する Javascript フレームワークが Angular から React に変わるなど、大きめのアップデートも結構あります。
キャンプと呼ばれるローカルに根付いたコミュニティがFBグループを利用して世界各国に設立されていますが、私がgithubで見つけた当時は日本にまだコミュニティが存在せず、だったら自分で設立してみようと思い、おぼつかない英語力で freeCodeCamp の創設者の Quincy Larson さんと gitter でやり取りして、なんとか日本初のキャンプを東京に設立しました。freeCodeCampTokyo
勉強会を開催するにあたり、他の国で行なわれているミートアップを参考にさせてもらうと、カフェなどに集まりコーヒーを飲みながら、freeCodeCampを進めていき、質問したりしていくのがメジャーな進め方のようだった(freeCodeCampでは coffee-and-code と呼ばれています)ので、私が勤めている株式会社ソニックガーデンのオフィスを借りて、勉強会を開催していきました。初回の勉強会では私と1人の参加者の合計2人ではじまり、現在ではFBのページは200人を超えて、毎回5~10人が参加していただける勉強会になってきました。
感じているひずみ 勉強会を運営していくにあたって、色々とひずみを感じました。
 参加者の交流が生まれにくい 他の人のコードを見る機会がない 外部の人から見て何をやっているのかわかりにくい 自分自身が勉強会を楽しめない  それぞれについて考えていきます。
参加者の交流が生まれない モクモク会（ただひたすらfreeCodeCampのコンテンツを進める）としているので、最後の時間を使って何をしたのか報告はするんですが、初回の人だと、ただ Javascript の基本的なところを進めて発表するだけなので、他の人に見せる物もなく、質問もなければほとんど喋る機会がなくなる。せっかくリアルで会う勉強会に参加するので、何か交流できるものを取り入れたいと思いました。
他の人のコードを見る機会がない 1つ目と内容少し被りますが、appear.in というサービスを使い、画面共有して前のスクリーンにコードを表示できるようにしていますが実際に利用する人は少なかったです。今後もfreeCodeCampを進めていくなら、より良いコードというものを意識して書けた方が良いのでなるべく早い段階で、モダンなJavascriptの書き方やデザインパターンなどを身につけられる仕組みが必要だと感じました。
外部の人から見て何をやっているのかわかりにくい 勉強会の外部に対するアウトプットがないため、非常に謎の勉強会になってしまっており、新しく参加したい人にとってハードルが高くなっている気がしました。Facebookのグループにやったことを投稿すればいいんですが、もくもく会だったため、発表する内容が作りにくいという状況。
自分自身が勉強会を楽しめていない 自分一人で勉強会の開催や当日の運営などをやってしまっていて、人に任せるということがうまくいっていませんでした。モクモク会だし、賑やかになる必要はないんですが、質問も1回もない勉強会で終わりそうな雰囲気の場合には、何か自分が喋って話題でも出さなければという気持ちになってしまって、あまり自分自身が楽しめていなかったです。
反省を踏まえて、これからやっていきたいこと ペアプログラミングを行い、コードをみんなで見せ合う やはり、プログラマとしての成長という観点だとペアプログラミングを行うのが効率的な気がします。参加者枠を初心者(初めてプログラミングに触ってみる人)と中級者以上(他のコンピュータ言語含めて、実際にコードを書いたことがある人)に分けて、初心者と中級者以上のペアで組んでもらい、ペアプログラミングを行いながら毎回お題(アルゴリズムの問題等) を解いてもらって、発表しながらコードについて話していきたいですね。実際にペアプログラミングやっってみると、ナビゲーター(コードを書かずに、全体の構成などを考え指示する役割)も自分の知識で足りていない部分などにも気づき成長に繋がっていくと思います。また、発表の部分については、実際にGoogle Hangout OnAir などを利用して外部配信+youtubeで公開とかすれば、外部の人にとってもどういうことをしているのかわかるようになってくると思います。
自分以外を無理やり絡ませる 自分だけで、運営しようとすると無理が出てくるので、他の人を無理やり絡ませてやっていこうと思っています。ちょうど、今まで勉強会で利用していた、ソニックガーデンの渋谷オフィスが移転に伴い使えなくなったので、開催場所に困っていることをFacebookグループでつぶやいたところ、別のfreeCodeCampの勉強会FreeCodeCamp#1を開催してくれたり、会場を提供してくれる方が声をかけてくださり助かっています。困った時はつぶやくの大事ですね。別のfreeCodeCampの勉強会では、いつも私が開催してるイベントの10倍くらい人が参加申し込みが集まっているみたいで、募集の仕方一つでこうも変わってくるのかと驚いていますし、当日スタッフ枠を用意しておくなど、勉強会慣れしている感じがしますね。。。私自身も細々とですが、勉強会を開催していこうかなと考えています。
目的を決める 目的が明確になっていないため、自分としてどのように動けばいいのかが見えていませんでした。なので勉強会を行う目的について考えてみました。 まず、せっかくのリアルで会って行う勉強会なので利点を活かしペアプログラミングをしたり、終わった後に懇親会をするなど交流を持ちたい。あと日本でもfreeCodeCampを広めていくために、していかないといけないことがコンテンツのi18n化(日本語化)だと思います。そこら辺を踏まえて、次のような目的でやっていこうかなと考えています。
リアルでの交流とFreeCodeCampを通じて、勉強会参加者全員がより良いJavascriptを書けるようになり、この活動を継続可能な状態で拡大していく。
勉強会を開催していき、freeCodeCampのコンテンツを終わらせて一流のプログラマになりたいです。</description>
    </item>
    
    <item>
      <title>弟子がペアプログラミングで成長する 家庭教師と背後霊 #sgadvent</title>
      <link>https://blog.regonn.tokyo/programmer/2015-12-15-pair-programming/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-12-15-pair-programming/</guid>
      <description>ペアプログラミング この記事はソニックガーデン Advent Calendar 2015の15日目の記事です。 今回はソニックガーデンで私が行っているペアプログラミングについて書いていきます。
私は新卒2年目で技術的にもまだまだ未熟のため、ソニックガーデンの師匠レベルの人に毎週1時間だけ時間をもらって、ペアプロをしてもらっています。 たった週に1時間やるだけでも学べることが多かったのと、実は 「ふりかえり（※）」でもこの方式で進めていくと日々成長できる ということがわかりました。
 \* ソニックガーデンではKPTと呼ばれる方式で「ふりかえり」をおこない、働き方を改善していっています。[自律的に現場を改善できるチームをつくるための「ふりかえり」の進め方 〜 KPTと進め方のノウハウ](http://kuranuki.sonicgarden.jp/2013/05/kpt.html)  ペアプログラミングは、普通はdriver（実装する人）とobserver（driverの実装を見ながら設計を考えたり、 リファクタできるところなどを考えながら進めていく人）に分かれますが、弟子と師匠のようにレベルの差が出てくると、 家庭教師と背後霊という方が合いそうなので、そう名付けました。それぞれについて見ていきます。
家庭教師（自分が実装する） 家庭教師はそのままです。私が実装していくのを見てもらいます。
ペアプログラミング内でやる内容は自由ですが、私はその週で実装をしていて、実装が複雑になってきて気になる場所を質問してどうリファクタしたらいいかや、 新しく見つけたライブラリが使えそうかなどを聞いたりしてます。
実装が複雑になり、書いてて気持ち悪いコードになっているのは理解しているけど、どうリファクタをすればいいかが思いつかないぐらいの部分がちょうど良いレベルの質問箇所です。
一度は自分で考えてたり、実装してて気になる所を、師匠レベルの人の答えを聞けるので、普通に学習するよりも記憶に残りやすい 気がします。 自分でもコードが書けてくるようになると、以前書いたコードのところが変だと気づけるようになってくるので、そこをどう直したらいいかも相談できます。
あと、実装中の無駄な動き（ショートカットがあるのに、わざわざGUI上で移動してる等）を指摘してもらったり、 デバッグの場合は師匠の人がどのようにバグを見つけているかを順序立てて追えるので作業の効率化ができます。
背後霊（師匠の実装を見てる） 家庭教師では、自分がプログラミングを行う方式でしたが、もう1つは師匠が実際にプログラミングをするところを見せてもらう方法です。
ペアプログラミングのobserverに求められる設計については行わずに、師匠レベルの人がどのように実装しているか、 どのようなツールやコマンドを使っているかをただ後ろから眺めているだけなので背後霊と名付けました。
その都度、気になった所を質問していきます。実装されたコードはあとで差分等は確認できるので、 書かれているコードを理解しながら追うよりも、どのように作業を進めているかを確認していきます 。
例えば、自分の知らないエディタの機能が使われていたり、どこの部分から実装に取り掛かるのか等を見ていき、自分だったらどうするかの比較をしてみたりするのも面白いです。
&amp;ldquo;ふりかえり&amp;quot;も基本はこの形でやる プログラミングではこのやり方で成長を実感できていて、さらに普段の&amp;quot;ふりかえり&amp;quot;でも行えると技術面以外の所でも日々の成長ができていけると気づきました。
ソニックガーデンでは弟子は毎週個人の&amp;quot;ふりかえり&amp;quot;を行っています。 &amp;ldquo;ふりかえり&amp;quot;を小口化して、毎日自分だけで&amp;quot;ふりかえり&amp;quot;をしてみて、そこで行った内容を週毎の個人の&amp;quot;ふりかえり&amp;quot;で見てもらいます。
その習慣ができてくると、日々自分の働き方の反省と改善のサイクルができてきます し、週毎の個人の&amp;quot;ふりかえり&amp;quot;では、 家庭教師のように、師匠レベルの視点で見てもらいフィードバックがもらえます。
では背後霊はどうするのかというと、それは 現在師匠レベルの人達が過去に行った&amp;quot;ふりかえり&amp;quot;を見てみること です。 &amp;ldquo;ふりかえり&amp;quot;の資料は、過去の分も残ってることが多いと思うので、現在の師匠レベルの人達が成長するために行ってきた&amp;quot;ふりかえり&amp;quot;を見ることで、 どのような部分で悩んでいて、そこからどのように問題を解決してきたかの道筋が見えてきます。
以上のことを意識して技術だけでなく、働き方の部分でも日々成長していきたいです。
ソニックガーデン Advent Calendar 2015</description>
    </item>
    
    <item>
      <title>ソニックガーデン プログラマ FAQ #sgadvent</title>
      <link>https://blog.regonn.tokyo/programmer/2015-12-12-sg-faq/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-12-12-sg-faq/</guid>
      <description>FAQ この記事はソニックガーデン Advent Calendar 2015の12日目の記事です。 今回はソニックガーデンのプログラマによく聞かれる質問に対して答えていきます。
プログラマはどれくらいいますか？ ソニックガーデンでは全員がプログラマです。現在社員は12名います。
営業はどうしていますか？ 先ほども書きましたが、ソニックガーデンは全員がプログラマなので、営業の人はいません。 ソニックガーデンのビジョンの1つに 情報をオープンにし常に公明正大であること とあり、 広告費にはほとんどお金をかけないで、代表倉貫によるブログ（Social Change!）や、 ソーシャルメディアを通じて、ノウハウなどの情報を公開していき、注目を集めるスタイルを目指しています。
ディレクター・企画担当者はいますか？ もちろん企画担当者という人もいません。 ソニックガーデンでは受託と自社サービスを開発していて、受託開発の場合だと企画はお客様に担当していただき、 自社サービスの場合ですと、最近は「部活」という制度が始まり、作りたいものがあれば自分で作って企画も勝手にしていけばいいという風潮です。 上司をなくせばうまくいく「ホラクラシー」採用と育成の仕組み 〜 ギルドを２年やって得た学び（この記事の中の&#39;会社公認の「部活」がイノベーションを生むかも&#39;の部分で部活が取り上げられています）
デザインはどうしていますか？ ソニックガーデンではデザインメンターという制度を取り入れています。 詳しくは次の記事に書いてあります。 【前編】エンジニアの会社でデザインがうまくいくワケ〜「エンジニア病」にはダメ出しされよう
テスターはいますか？　また、テストの体制はどうなってますか？ ソニックガーデンではテスターという専門の人はいません、その代わりに受託開発でリリースする前には、社内メンバーに触ってもらってバグを見つけたり、 全体コードレビュー（rails newからリリースまでの差分を見る）を行います。 ソニックガーデンではバグを無くそうと躍起になるのでなく（もちろんバグはない方が望ましいですが）、 バグは発生するものという認識で発生した際にどのようにすぐ対処できるかを考えて開発・運用 を行っています。
テストコードに関しては、ソニックガーデンでは継続して開発を進めていて、テストコードも継続して増やしていきます。 機能が増えたらテストコードも書きますが、 バグがあった時にも先にテストを書いてしまいテストの担保する部分を増やしたりしてます。
採用ってどうしてます？ ソニックガーデンでは社員は長い期間（又は生涯）共にする仲間なので採用に時間をかけています。 次の記事に書かれていますが、プログラマも職人として銀座久兵衛の採用を参考にしたり、採用のために自分たちでツールを作っていたりしています。 ホラクラシー実践のヒントは銀座久兵衛、そしてプロ野球トライアウトにあり【2015年前半のインプットlog-倉貫義人】 - エンジニアtype
また、見習期間中（採用途中）の方々もこのソニックガーデンアドベントカレンダーに記事を書いていますのでそちらのリンクも書いておきます。
ソニックガーデンの採用を受けて - たまに書くかも
ソニックガーデンと私 - no feature
ソニックガーデンの見習いになって : まつしんブログ
私自身も新卒でソニックガーデンに入って、現在弟子という立場で日々の学びなどは、このブログで書いています。
エンジニアの働きやすさみたいなことで心がけていることは？ エンジニアが100％なので周りからも影響を受けてエンジニアとして成長しやすい環境になっているのと、 リモートワークを推奨しており働く場所を問わないので、ネットさえ繋がればどこでも仕事ができるようになっています。 自分達の問題（リモートワークで発生する問題等）を解決するためにサービスRemottyを作ったりしているため 「自分たちの問題を解決していく=エンジニアが働きやすい環境になっていく」 という仕組みになっているんだと思います。
ソニックガーデン Advent Calendar 2015</description>
    </item>
    
    <item>
      <title>素直なコードについて考える #sgadvent</title>
      <link>https://blog.regonn.tokyo/programmer/2015-12-05-honest-code/</link>
      <pubDate>Sat, 05 Dec 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-12-05-honest-code/</guid>
      <description>素直なコード？ この記事はソニックガーデン Advent Calendar 2015の5日目の記事です。 今回は以前、代表の倉貫が島根の松江Ruby会議 06で公演を行うので、 一緒について行ってライブコーディング大喜利というイベントに参加した時に言われた「素直なコード」というものについて自分で考えてみました。
その時のライブコーディング大喜利で書いたコードはqiitaにあげてあります。
松江Ruby会議06で出された問題を解いてみた。 - Qiita
ライブコーディングが終わり、コードを見てもらったのですが審査員の人から「素直なコードですね」と言われました。
その当時、新卒入社1年目で技術力はなかったものの、 ソニックガーデンでは可読性のあるコードや保守性の高いコードの書き方になるようにコードレビュー等で頻繁に注意されていたので、 意識してそう言ったコードは書けていたと思います。
もし、素直なコードを超えた先（ソニックガーデン師匠レベルの人達が書くコード）はどんなコードになるのかなと考えてみました。
（忙しい人用に4行でまとめました。飛びたい場合はコチラ）
素直なコードになる前は？ まず素直なコードに達するまでは、どんなコードと呼べるかを考えたら、 自己中なコード だなと思いました。
例えばRailsで次のようなコードはかなり自己中なコードです。
# 1ヶ月(30日), 2592000秒 def self.delete_expired_events all.each do |event| if Time.now.utc - event.created_at &amp;gt; 2592000 event.destroy end end end コメントはありますが、2592000という文字が何を意味するのか捉えにくい（[マジックナンバー](https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B8%E3%83%83%E3%82%AF%E3%83%8A%E3%83%B3%E3%83%90%E3%83%BC_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)と呼ばれてる）ですし、 もし2か月後に変更するときに 2592000 * 2 みたいになると、余計混乱の元です。
じゃあ素直なコードは？ さっきのコードの例だと、素直なコードは
def self.destroy_expired_events where(&amp;quot;created_at &amp;lt;= ?&amp;quot;, Time.current.months_ago(1)).destroy_all end みたいになります。if文がなくなって1行になったり、 months_ago メソッドを使っているため、どの条件でイベントを削除したいのかがわかりやすくなりました。
RubyやRailsのメジャーな書き方やメソッドをちゃんと使いこなせているようになると素直なコードは書けるようになってきます。 ここまでくると可読性も上がり、他の人や将来の自分が見ても理解しやすいコードになっています。
次のステージへ もし、この次があるとしたらそれは、コードの全体や運用での観点でコードが考えられているのだと思います。 例えば、
 ステージング環境でちゃんとデータが消されるかを確認したいんだけど1か月待たないといけないの？　。 運用してから削除する日数（月単位でない）を決めたいから簡単に変えられるようにしておきたい。 他にもユーザーが特定の日数以前のデータを消せるように def self.</description>
    </item>
    
    <item>
      <title>ソニックガーデンアドベントカレンダー 2015 はじめました #sgadvent</title>
      <link>https://blog.regonn.tokyo/programmer/2015-12-01-sg-advent/</link>
      <pubDate>Tue, 01 Dec 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-12-01-sg-advent/</guid>
      <description>ソニックガーデンAdvent Calendar 2015 ソニックガーデンの弟子（新卒）の田上です。この記事はソニックガーデン Advent Calendar 2015の1日目の記事です。 初日ということで、まずはこのアドベントカレンダーのチュートリアル的なことを書こうと思いました。
ソニックガーデン流の働き方 ソニックガーデンでは2012年にもアドベントカレンダーをやっていました。
当たり前を疑うことができるか？〜ソニックガーデン2012年のアドベントカレンダー
「ソニックガーデンでは当たり前なんだけど、世間一般では珍しい取り組みや考え方」 というテーマで当時ソニックガーデンで働いていた、7名が記事を書いています。
このアドベントカレンダーが作られてから約3年が経っていますが、普通3年経てば変化の早いIT業界で周りの環境も大幅に変わり記事の内容は古い情報になってしまいがちです。
しかし、今読み返してみてもソニックガーデン流の働き方の本質は変わっていなく、 ソニックガーデンのプログラマとして働くための考え方 が書かれていると思います。
代表の倉貫が「**当たり前を疑うことができるか？　**」という記事の中で
 そしてこれは、自分たち自身にもあてはまります。すでに自分たちが「当たり前」と思っていることも、自分の頭で考え直して、疑ってかかる必要があります。 そうして、自分たちで自分たちの「当たり前」を壊していける組織が、強い組織になるのではないでしょうか。
 と書いていて、これは普段行われる「振り返り」にも出てくるもので、 自分の勝手な思い込みだったものを「そもそも何の目的だったのか？」から考え直すことで 自分の当たり前を壊すことで自分自身の成長 につながり、それが組織全体の成長にもつながっている気がします。
今回のソニックガーデンアドベントカレンダー 今回のアドベントカレンダーでは前回と比べて、人数も増えたので25日分作ってみようという話になりました（この記事を書いている2015/11/30の時点だと、かなりの空きが目立ちますが…）。
ソニックガーデンメンバーが普段使っているツール等技術関連の話から、常に変化を受け入れながら改善されてきたソニックガーデン流の働き方の話、 弟子や見習いといった前回のアドベントカレンダーが作られた当時は存在していなかったポジションの人達から見たソニックガーデンの話など多岐にわたっています（予定）。
前回のアドベントカレンダーが書かれてからの3年間でも 「ソニックガーデンでは当たり前なんだけど、世間一般では珍しい取り組みや考え方」 はどんどん生まれてきています。
ソニックガーデンには筆不精なメンバーも多い（自分含め）ので、こういった企画でソニックガーデン流の働きかた等を知ってもらえるいい機会です。
そして、最終日にはソニックガーデン代表の倉貫の記事が待ち構えています。お楽しみに。
ソニックガーデン Advent Calendar 2015</description>
    </item>
    
    <item>
      <title>チャットのメンションなどで使われる@で始まる部分にマッチする正規表現</title>
      <link>https://blog.regonn.tokyo/programmer/2015-11-20-swift-mention/</link>
      <pubDate>Fri, 20 Nov 2015 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-11-20-swift-mention/</guid>
      <description>よくチャットなどで @regonn のようにメンションで使ったりしますが、Swift で正規表現(NSRegularExpression)を使って取得したい。
例えば次のような String の場合
&amp;quot;@banana @ tomato @orange regonn@sonicgarden.jp &amp;quot;
マッチして欲しいのは [ ] で囲んだ所(今回は@のみもマッチする)
&amp;quot;[@banana] [@] tomato [@orange] regonn@sonicgarden.jp &amp;quot;
そこで次のようなコードになりました。
mentionMatch.swift import UIKit let string = &amp;#34;@banana @ tomato @orange regonn@sonicgarden.jp &amp;#34; let regrex = try? NSRegularExpression(pattern: &amp;#34;(?&amp;lt;=^|\\s)(@\\w*)&amp;#34;, options: NSRegularExpressionOptions.CaseInsensitive) let matches = regrex!.matchesInString(string, options: [], range: NSMakeRange(0, string.characters.count)) for match in matches { print(match.range) } =&amp;gt; (0,7) (8,1) (17,7) ちゃんと 3 か所にマッチできていることが確認できます。
今回の正規表現は
(?&amp;lt;=^|\\s)(@\\w*)
となりました(もし@単体はマッチさせたくないのなら最後をw+に変更)</description>
    </item>
    
    <item>
      <title>ベンチャー企業のイメージが変わるかもしれないソニックガーデンを紹介</title>
      <link>https://blog.regonn.tokyo/programmer/2015-08-25-sonicgarden/</link>
      <pubDate>Thu, 27 Aug 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-08-25-sonicgarden/</guid>
      <description>就活中の皆様へ 最近、このブログのアクセス解析をしていると「ベンチャー　新卒」というキーワードで、 このブログにたどり着く人が2016年度の就活が解禁された8月から増えてきたので、就活をしている人たちに向けて記事を書こうと思いました。
私は2014年に大学院を卒業して、当時社員は9名の株式会社ソニックガーデンに入社しました。
この記事では私が働いているソニックガーデンについて紹介します。 ソニックガーデンは10人規模なので、分類すればベンチャー企業や中小企業という枠に含まれます。
ITでベンチャー企業と聞くと、バンバン資金調達を繰り返して、急成長し、世界に挑戦していく、、、 のようなイメージがありますが、ソニックガーデンは、そういったイメージとは、かけ離れています。
こんなベンチャー企業もあるんだなといった感じで読んでみてください。
ソニックガーデン まず、ソニックガーデンについて簡単な説明をしていきます。 株式会社ソニックガーデンは、TISという国内大手SI企業の社内ベンチャーから始まりました。 社内向けSNSのSKIP等を開発して、2011年にTIS株式会社からのMBOを行い独立して4年目の企業です。
代表の倉貫が、「納品のない受託開発」(詳しくは書籍になっています等で IT業界のスタンダードを変えることで、 デスマーチや3K（キツい、給与少ない、帰れない）といったIT業界のマイナスなイメージを変化させ、 プログラマの地位を向上やソフトウェア開発の仕組みを変えていこうと日々邁進しています 。
私がソニックガーデンを知った経緯等は、この記事で書いてあります。
株式会社ソニックガーデンに入社しました
急成長ではなく、持続可能な企業を目指す ソニックガーデンの現在（2015/08/27）の社員数は12名です。私が入社してから約1年半が経過しましたが、3人（私含めて）しか入社していません。
私はソニックガーデンの前にも他のベンチャー企業でインターンをしていましたが、そこでは毎週のように新しいメンバーが加わり、 オフィスも広くなり、どんどん成長していました。他のベンチャー企業も急成長していることを謳って知名度を上げているところが多いです。
ではなぜ、ソニックガーデンではこんなに成長が緩やかなのでしょうか？　もちろん、人を雇うお金が無いからではありません。
他のベンチャー企業と違う所の1つに、ソニックガーデンは 急成長ではなく、持続可能な企業を目指しています。
投資が入ることで大きなビジネスをすることはできますが、諸刃の剣にもなります。 事業を拡大するために投資をしてもらい、投資をしてもらうために事業を拡大して利益をあげます。 うまく回り続ければいいのですが、どこかで鈍ったりしてしまうと急激に足元が崩れてしまうこともベンチャーではよくあることです。
私の考えではビジネスというものはマラソンのように、長く続く長期戦です。 そこで 短距離のようにダッシュを繰り返して、怪我をしてしまうよりも、マラソンでしっかりペースをキープすることや、 登山のように一歩一歩確実に進んでいくことで、犠牲を少なくしながら最終的に大きな物事を達成することができるのだと思います。
案件が増えて、人が足りないから、大量に求人して成長を拡大していくスタンスとは逆で、 人を中心にビジネスをしているため、人がいて初めて案件を受けるようにしています。
このようなビジネスを行うためには一緒に働くメンバーの採用にも長い時間をかけて判断します。 よく驚かれるのですが、中途採用には半年以上の期間を設けています（新卒採用の場合は例外もありますが）。 長期のスパンで一緒に戦う仲間なので、自分達の価値観が一緒で同じ目標に向かって進んでいけるメンバーかを確かめる必要があります。
このような仕組みのため、 ソニックガーデンには 技術の高い、常に向上し続ける人が集まり、会社として全員がより高みを目指していけるようになっています。
営業、経理、企画はいなくて、全員がプログラマ 代表の倉貫と、副社長の藤原を抜くと全員がプログラマです。
それで、業務が回るのかと不安になるかもしれませんが、ソニックガーデンでは ビジネスに必要なものの本質だけを残して あとは、 業務委託をしたりしています。
普段は受託開発をしていますが、全員がプログラマなので、 自分たちの普段使うツールも自分たちで作っていきます。さすがに、プログラミング用のエディタを0から作るようなことはしませんが、 あとで説明しますがソニックガーデンにはリモートワークで働く人もいて、 どうしてもチャットやSkypeだけだと、コミュニケーションがうまくいかない場合が多いです。
そのため、自分たちでコミュニケーション問題を解決するために、 リモートワーク向けのチャットシステムRemottyや、 皆が普段なんの業務をしているのか知るための日報システム（ブログ記事：リモートワークにも応用可能なチームのコミュニケーションを加速させる日記システム）等を開発しています。
10人ぐらい規模なのに新卒を採用している これも、珍しいと思います。ベンチャー企業は中途をメインで募集をします。 急成長をするには即戦力がほしいですし、教育にお金をかける余裕がないからです。
しかし、そのリスクを取ってでもソニックガーデンでは新卒を採用しています。 代表の倉貫は目指す会社を寿司屋の銀座久兵衛によく例えます 。
銀座久兵衛に学ぶ一流の職人の育てかた 〜 スケールだけではない文化を広める一つのスタイル
新卒で入ると弟子として採用され、最初の数年は修行を積んで一人前になっていきます。
私の他にも今年も1人女性のプログラマが新卒で入社しています。
夜遅くまで働いていると注意される ITベンチャー企業は他にも、夜遅くまでとにかく働いて、常にエンジンフルスロットルで突き進むイメージもありますが、 ソニックガーデンでは、夜遅くまで作業をしていると逆に怒られます。</description>
    </item>
    
    <item>
      <title>開発環境の構築に便利な秘伝のタレ持ってますか？</title>
      <link>https://blog.regonn.tokyo/programmer/2015-08-16-tare/</link>
      <pubDate>Sun, 16 Aug 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-08-16-tare/</guid>
      <description>綺麗な開発環境（美味しいタレ） プログラミングを行う前に必要なのが、開発環境構築です。 プログラミングを始めたころは、サイトや書籍に書いてある通りに環境を作っていきますが、 情報が古かったり、メジャーではない方法で構築していくと、どんどんカオスな状態になってしまいます。
例えば、Macだとhomebrew（パッケージ管理）とネイティブの両方で同じDBのライブラリを持っていたり、 Rubyの特定のversionをネイティブにインストールしていて、他のversionを使うおうとするときに、 アンインストールをしないといけない等の開発環境が整っていないと、無駄なエラー等も発生してしまいますし、 できるプログラマの人はすでに環境が整っているので、通常とは違うエラーが発生して聞いてもすぐに解決できない可能性もあります。
整った開発環境にするには、休日等時間が取れるときに一度クリーンインストールして、そのインストールした手順をメモしておきます。 そのメモを保存しておいて、ある程度知識や技術が身についてから、もう一度そのメモを見ながらクリーンインストールしてみます。
そして、何度もやっていき、知識がついてくると、今までのメモにも無駄な部分や改良できる部分ができてきます、 それを繰り返すことで、まるで 秘伝のタレのように自分に合った環境を短時間で整えることができるようになってきます 。
綺麗な開発環境は、メンテナンスや拡張もしやすくなるのでコードと一緒 ですね。
自分の環境をいつでも使えるように ちなみに私のMac用の初期構築はこれです。tare.md 参考リンクにtherubyracer gemのエラー対処の記事が多いですが、こんな感じで構築中に躓いたところは参考リンクと一緒に書いておいて、 毎回必ず起こるのであれば、レシピの中に対処法を書いてしまいます。
他にも.vimrcや.zshrc等のエディタやターミナルもまとめてdotfilesをGitで管理していて公開している人も多いです。 （ちなみに、私の働いているソニックガーデンの人もdotfiles公開してるかなと&amp;rsquo;sonicgarden dotfiles&#39;でググってみたら、 maedanaさんのGithubリポジトリmaedana/dotfilesが出てきました。 最初の更新が7年前ですけど、2015/08/16の時点で30日前に更新されているので、タレが継ぎ足されてるみたいですね）
常にタレの美味しさを更新しよう 常に技術のトレンドは変わっていくので、タレも継ぎ足ししていかないといけません 。例えばさっきのMacの初期構築のタレだと、 今まではブラウザ等のソフトは、いちいちサイトに行ってインストールしていたんですが、Homebrew Caskを使うと、 リストに登録されていれば普段.dmgファイルをダウンロードしてインストールしているソフトを一括でインストールしたり、 アンインストールもbrewコマンドのように使えて、安定して動いていたので最近タレに追加しました。 ある程度、タレの美味しさも保つためには安定して使えるかの検証もしてから、追加するといいです。
タレ作りは初めてのサーバー構築等でも効果アリ！ 自分の環境だけでなくサーバー構築の際にもタレは使えます。 例えば、Linuxのサーバー構築とかraspberry pi等の構築が毎回必要なものも、構築していきながら毎回打ち込んだコマンドを記録しておいて、 進めていきます。
もし結局使わなかったライブラリや間違えていた設定等は、後で打ち込んだコマンド一覧から消しておけば、スッキリしたタレが出来上がり、 他の人にサーバー構築をしてもらうときにも役に立ちます。
履歴は必要だけど もう、すでにサーバー構築等はドキュメントという形で保管されているかもしれませんが、もしかしたらコメントで ◯月☓日△△ 更新みたいに、 継ぎ足ししすぎて、よくわからない味のタレになっていませんか？
履歴は大事ですが、可能であれば Gitやgoogle document（デフォルトで履歴管理機能がある）でドキュメントを管理しておくと、 スッキリしてくる と思います（誰がどこを編集したかの情報や、最後にいつ使われたのかの情報も残っていると鮮度もわかってなお良いです）。
タレはごちゃごちゃせずに、必要なコマンドだけが読める状態になっているのが望ましいです。
もしかしたら将来は 今は技術も進歩してきて、開発環境をブラウザで構築（Cloud9とかNitrous）できてしまったり、 サーバー構築もDocker技術などで簡単に構築できてしまうので、将来は必要なくなってくるかもしれませんが、 自分のお気に入りの環境というのも、 熟練プログラマには必要なのかなと思います 。</description>
    </item>
    
    <item>
      <title>リモートワークにも適切なコミュニケーションを加速させる日記システム</title>
      <link>https://blog.regonn.tokyo/programmer/2015-08-09-diary/</link>
      <pubDate>Sun, 09 Aug 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-08-09-diary/</guid>
      <description>リモートワークには日記システム 最近は地方で働くリモートワークの考え方が広まってきましたが、 リモートワークを導入する際の問題の 1 つに コミュニケーション不足の発生 があります。 普段オフィスに一緒に過ごしているならば、お昼を食べにいったりと交流の機会もありますが、 同じプロジェクトを進める等の接点がない限り、なかなかお互いを知り合う機会がないと思います。
私が働いているソニックガーデンではリモートワークを推進していて、 remottyというリアルタイムの顔が見えるチャットシステムを自分達で開発することで、 コミュニケーション不足問題を解決していますが、 日報ではなく日記を書く ことも、効果があると思ったので紹介します。
日報と日記？ まず、日報と日記って何が違うのかが曖昧だと説明しにくいので、最初に私が思っている日報と日記の違いを説明します。 ベン図にしてみました、どんな内容が日報と日記に含まれているのかを書いています。

日報は日記の中の仕事の一部という位置づけです。 なので、日記にしたことで、今まで日報で書いていた内容がなくなるということは無い と考えています。
日報の目的 日報では、その日の業務内容をタイムスケジュールと一緒に、業務内容や所感、気付きといったものが書かれています。 目的としては、上司に業務の進捗や不明点、所感といったものを伝える ことで、 上司が部下の進捗を把握できたり、日報を書く人が自分で PDCA サイクルを回せるようになることが念頭に置かれています。
この 部下 → 上司 といった一方通行の流れや、 自分自身のこと で留まってしまうため コミュニケーション に関することは考慮されていません。
そこで、日報の枠を飛び出して、日記にしていくことでコミュニケーションの部分が増えてきます。
日記の内容 日記では、書ける範囲が急に広がります。例を上げると
 家族（娘の誕生日だった等の情報で家族構成がわかる） 飲み会（◯◯ さんとざっくばらんに話して、意外な一面を知って書いておく） 趣味（オフィスで苔を育ててますなど、話のネタができる） 仕事のグチ（このシステムすごい UI がダメで使いにくいなど、問題点を共有） モヤモヤしてること（どうすれば開発効率が上がるのか等普段気にしていることを周りに知ってもらえる） 忙しさ（◯◯ に時間が取られて仕事が進まない等、これも問題点として共有できる） 振り返り（振り返りの内容を書くことで他の人達も、自分の振り返りの参考にできる）  等の話が書かれているので、これらを知ることができるだけでもチームとしてのコミュニケーションができてくると思います。
日報を書く文化でなく読み合う文化 日報は書くことも大事ですが、お互いに読み合う文化も同時に大事です。 日報のように上司だけが読むのではなく、みんなで読み合うことで、お互いのことを知ることができる ようになります。 ソニックガーデンが自前で作っている日記ツールでは、投稿するとメールがメンバー全員に送信され、誰が日記を読んだのかもわかりますし、 気に入ったものには&#39;イイね&#39;ももらえるので、ちゃんと読んでもらっていることがわかって安心します。
経営者が何をしているのかも知ることができる 経営者も日記を同様に書くことで普段何しているのかを、社員に知ってもらえます。 ソニックガーデンでも代表の倉貫が毎日日記を投稿しているので、普段なかなか知ることができない、 経営方針に関することも書かれていて、社員は どういう風に会社が動いているのかのイメージもしやすい です。 「ザ・ビジョン」という本で、CEO が毎朝全社員に向けて、メールを送ることで社員のビジョンを同じ方向に向けていく話がありますが、 それと似ているかもしれません。</description>
    </item>
    
    <item>
      <title>一人前のプログラマが行き詰まった時に当たり前にやっているRSAPって何？</title>
      <link>https://blog.regonn.tokyo/programmer/2015-08-02-rsap/</link>
      <pubDate>Sun, 02 Aug 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-08-02-rsap/</guid>
      <description>だれでもプログラミングで行き詰まる時 プログラミングを始めたばかりの人だと、プログラミングをしていて実装に行き詰まることが多くあります。 もちろん、一人前のプログラマでも新しい技術を使うときとかには、行き詰まることもあります。 しかし、そこでも 新米プログラマと一人前プログラマでは行き詰まらないためにすることの違い があり、 効率的に開発が行えるかが関わってくるのでは？　と考えていたら RSAP という言葉を知りました。
RSAPって？ 最近FreeCodeCampというサービスで学習をしていますが、 そこの初心者向けの記事に次のようなものがありました。 How do I get help when I get stuck? この記事でRSAPというという言葉が使われていて、行き詰まらないためにする行動の頭文字が使われています。 RSAPについて順に説明していきます。
R(ead the documentation or error) 
公式ドキュメントとエラーをちゃんと読もう ということです。 オープンソースのライブラリであれば、大抵ドキュメントも更新されていますし、公式のチュートリアルもあることが多いです。 そのコードを見ながら、まず、公式通りにやって動くのかを試して、自分がやろうとしていることと照らしあわせて変更していきます。 ここらへんは、以前のこの記事で書いています。(プログラミングにおいて大切な&#39;スパイクを打つ&#39;とは？)
一人前のプログラマは、コードの意味を理解し、ドキュメントの指示に従える能力を持っている のだと思います。 英語で大変かもしれませんが、次第になれますし、コードも一緒に書かれているはずなので、見よう見まねでやってみることもできるはずです。
エラーについては、この記事で詳しく書いています。(新米プログラマが身につけておきたいデバッグに必要な３つのこと)
ある程度コードが読めるようになってきたら、使っているオープンソースのライブラリを読むという行為も非常に役に立ちます。 もしかしたら、ドキュメントには書かれていない機能に気づけたり、エラーの原因をより厳密に捉えることができます。
自分が参加しているプロジェクトでも、プルリクやコミットログ等を追って、何が変更されたのかや、以前のコードが書かれた理由を知ることができると、 より開発を進めやすくなると思います。
S(earch Google) 
ググレカスです。大事なことですが、 調べ方にもやはりコツはあったりします 。 例えば、英語のみで検索してみると情報量が倍以上に増えますし、 期間（1年以内に更新があったもの等）を条件に組み込むことで古い書き方は除外したり、 エラーの時は、エラー文をそのまま貼り付けてみるのも効果的なことだと思います。
初心者が躓くことの1つの要因に 用語がわからない があります。 例えばRuby言語で:hogeみたいに:(セミコロン)が先頭についているオブジェクトって、 何て呼べばいいのかわからないと検索しにくいですよね。&#39;:&amp;lsquo;みたいな記号だとgoogleの検索対象に含まれない場合もあります。 もし、これがSymbolクラスだと名前がわかっていると検索もしやすくなります。 そして、用語が日本語でも英語でもわかってくると自分で検索もできるようになってくるので、 「こういう書き方って何て呼べばいいんだ？」ということを先輩プログラマに聞いてみたりしてみると良いと思います。 ただし、プログラミング言語が違うと同じ言葉でも概念が変わったりするので、そこら辺は注意が必要です。
A(sk your friends for help) 
ここまでやってみて解決しなければ次は他の人に尋ねる（助けを求める）段階です。もちろん相手だって暇ではないので、なるべく手短に済ませることがお互いに負担が少ないですが、 尋ねる相手は神ではないので、1のことを喋って10のことを理解できません 違う作業をしていることだってありますし、昔書いたコードで思い出すのに時間がかかるかもしれません。 しっかりと、何のプロジェクトで何のタスクで何に手間取っているのかを説明しなければならないので、ある程度要点を整理しないといけません。</description>
    </item>
    
    <item>
      <title>コードレビューの質を上げるために事前に確認しておきたい5つのこと</title>
      <link>https://blog.regonn.tokyo/programmer/2015-07-21-codereview/</link>
      <pubDate>Tue, 21 Jul 2015 08:00:00 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-07-21-codereview/</guid>
      <description>もはや当たり前のコードレビュー 2人以上で開発をしていて、コードの質を上げたり、お互いに成長するために、まず行われているのがコードレビューだと思います。 他の人にコードを見てもらうことで、どこが悪いのかを指摘してもらったり、今まで知らなかった書き方を教えてもらったりします。
教育の観点でも優れていて、学べることも多いので、最初は書いたコードを見てもらう機会が多くあるはずです。 新米プログラマだから多少コードがひどくても許してもらえるかもしれませんが、 コードレビューで突っ込まれる可能性が高い部分はなるべく減らしておいたほうが、コードを見る人にも見てもらう人にも負担が少なくてすみます。 円滑なコードレビューを行うために、新米プログラマがレビューの申請を出す前に注意しておくといい項目をまとめてみました。
あまり、特定の言語に依存しない内容にしてあります。
 もし、記事を読んでいて、「こんなの当たり前じゃないか、もう少し高度な内容をしりたい」という人がいらっしゃいましたら、 手前味噌ですがこちらのスライドも参考にしてもらうといいかもしれません。 ソニックガーデンで取り組んでいるコードレビューについても書かれています。 デキるプログラマだけが知っているコードレビュー7つの秘訣
1. コピーしてきたから正解ではない よくあるパターンに、同じプロジェクトで似たような実装があったので、そこを参考にしました と説明することがあります。 しかし、同じプロジェクトで実装されていたからといって、それが本当に正しいコードだという保証はありません。 一度コードレビューを通っているはずなので、コードの質は担保されているかもしれませんが、 もしかしたら、記述が古いかもしれない（Railsだとよくある）ですし、昔書かれたコードでリファクタしたい場所なのかもしれません。
2. 将来必要なものは今は必要でない 今度○○を実装するときに必要だと思って、あえて残してあります。 みたいなこともよくあります。 しかし、それだと 本当に将来使われるかわからない、現時点で無駄なコードが本番環境に反映されてしまいます。 これは YAGNI(You ain&amp;rsquo;t gonna need it)の原則 と呼ばれるくらいプログラミングではよく遭遇する場面です。 プログラミングのスキルが向上すると、保守性や可読性だけでなく、拡張も容易なコードになっていきます。 なので、将来を見据えてコードを書くのでなく、その時点で必要なものだけを実装することを心がけると、自然とコードの量も減り、 意図が伝わりやすい実装になります。
3. コードで表せなくなって、はじめてコメントを利用する 何をしているコードなのかが伝わるか不安になり、コメントを必要以上に書いてしまうと、逆に「なんでこのコメント書いたの？」 と質問されてしまう場合があります。大抵レビューしてくれる人は自分よりプログラミングが出来る人のはずなので、 メソッドや変数の命名が適切であれば読み取ってもらえます（その命名が難しいんですが…）。
では、どういう時にコメントが必要かというと例えば次のような場合です
# 会社設立が2009年なのでそれ以降を選択肢に表示 = f.input :hired_date, label: &amp;#39;入社日&amp;#39;, start_year: 2009, end_year: Date.current.year 上記のコードは入社日を入力してもらうフォームの例ですが、 もし突然start\_year: 2009というコードが現れると「なんで2009が決め打ちで出てくるんだ？」 と疑問が出てきます。このように コードでは表現できない部分にコメントを書いておくと、コードを見ている人を悩ませなくてすみます。 （この例の場合だと、コメントでなくてもestablished_year = 2009みたいな変数、定数でコメントをなくすこともできますが）
4. テストとマージは大丈夫？ これはコミット毎にも確認しておきたいことですが、コードレビューをしてもらう時には、 テストが通っていて、マージ可能か を確認したほうがいいです。 もし、テストが通っていなければ、まだ作業が完了していないことになりますし、マージできない状態だったら、 「コード的にはいいけど、マージできないので修正してね」といった無駄なコメントのやりとりが増えてしまいます。 OKだったらそのまま取り込んで貰えるコード を出したいですね。</description>
    </item>
    
    <item>
      <title>新米プログラマが身につけておきたいデバッグに必要な３つのこと</title>
      <link>https://blog.regonn.tokyo/programmer/2015-07-12-debug/</link>
      <pubDate>Sun, 12 Jul 2015 13:48:05 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-07-12-debug/</guid>
      <description>誰もが陥るデバッグの悪夢 プログラミングをしている人なら、常日頃デバッグ作業で悩まされているはずです。 プログラマにとって、はじめの関門はデバッグ作業ができることだと思います。 バグの原因を突き止めて自分で対処できるのか、 または誰かに聞いてみないと解決できないバグなのかも自分で判断してデバッグ作業をしていかないといけません。
デバッグ作業にも効率的なやり方やノウハウは存在し、それを知らないと ずっとバグと闘い続けるはめになり開発効率が上がりません。 今回は新米プログラマ（入社して1年が過ぎたのでいつまで新米なのか怪しいですが）の私がデバッグをしていて周りから注意or教えてもらったことを大まかに3つにわけてみました。 デバッガ等のツールを正しく使えるようになる技術も必要ですが、それよりも どうバグと向き合うか の部分にフォーカスしていきます。
1. ログを見ろ (エラー)ログをちゃんと眺めろという話です。
プログラムは思った通りに動かない。書いた通りに動く。
というプログラマの名言がありますが、同じように
起こった通りに出力されるのがログ
なので、実際に何がプログラムで起こったのかを突き止める場合には確認しなければならないところです。
最初はエラーが英語だったりして避けたくなりますが、どこでエラーが起こっているのかや、どんなSQLが発行されているのか、 どのページを表示しようとしているのか等もわかるので、ちゃんとログが読めるようになりたいですね。
あと、途中計算の結果をログに出してみると、どこまで想定している動きなのかも追いやすいです。
2. 事実と予想を一緒にするな よくやってしまうのが、自分でエラーの原因を勝手に想像して、対処しようとしてしまうことです。 本当は違うところが原因なのに、最初に見当違いな予想をしてしまったため、他の人に質問するときにも、自分の想像と事実が混ざってしまっていて 、相手が混乱してしまう 場合もありえます。
悪い質問の例として
モデルのリファクタの影響（想像）で、計算が正しく表示されていない（事実）です。hogeメッソドが怪しいと思う（想像）のですが（以下略）。
このような質問をされると、優れたプログラマなら &amp;ldquo;なんでhogeメソッドだと思ったの？&amp;rdquo; と聞いてくれるかもしれませんが 、何も背景知識が無かったりしたら、質問された側は &amp;ldquo;じゃあ、そのhogeメソッドをみてみるか&amp;rdquo; となり、 もし違うメソッドやモデル以外のところに原因があった場合に、2人で余計なところに時間を使ってしまう事態が起こります。
デバッグ作業で大事なのは どこまでが事実（実際に起ったこと、検証したこと）で、どこまでが予想（自分が考えた部分なのか） を切り分けることです。 実際にホワイトボード等に、何が事実で、何が想像なのかを箇条書きでもいいので書き出してみると、より理解が深まりますし、 どういったアプローチ（次にどこを調べるか）の参考になります。
実際のプログラムの挙動 は事実ですし、 出力されたログ や 既に検証したこと も事実です。しかし、そこから導き出した&amp;quot;モデルが影響している&amp;quot;は想定なので、 そこはちゃんと切り分けて、もし質問するなら
計算が正しく表示されていなくて（事実）、ログに計算の経過を出力してみたらhogeメソッドの返す値が空になっている（事実）ので、 hogeメソッドが怪しいと思うのですが（想像）（以下略）。
と質問すれば、質問された側も事実がどこまでか理解しやすいので、たとえ見当違いな想像をしていたとしても、事実をもとに原因を考えてくれます。
3. エラーはローカルで再現し、面倒ならテストを先に書け バグの中には 本番環境でしかエラーが発生しない という事態もよく起こります。こういう状態の時に、 いちいち本番環境やステージングの環境でやろうとすると、大事なデータを書き換えてしまったりしてリスクが高すぎますし、 修正する毎にデプロイをするため、デバッグ作業に時間がかかってしまいます。
本番環境でのみ発生するエラーをローカルで再現する ことをしてみましょう。 例えばAWSのS3(クラウドのファイルサーバー)にアップロード後に失敗するバグだったら、 自分でローカル用のS3を作ってみたり、アップロードが面倒ならコンソールで試してみるということもできます。 Railsでコンソールからファイルをアップロードする方法 
自分の環境なので、どんどんいじっても他に影響も出ませんし、いろいろ検証しやすくなります。
あと、再現が面倒なときはテストを先に書いてしまう というのも効率的にデバッグができます。
以前、とあるアプリで5つ以上のデータを削除しようとするとエラーが発生するバグと闘っていた時に、 毎回ブラウザ上で5つデータを作って再現させていました。何回も検証しようとするとそのたびに5つデータを作らないといけないので非効率ですね。</description>
    </item>
    
    <item>
      <title>プログラミングにおいて大切な &#39;スパイクを打つ&#39;とは？</title>
      <link>https://blog.regonn.tokyo/programmer/2015-07-04-spike/</link>
      <pubDate>Sat, 04 Jul 2015 13:48:05 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-07-04-spike/</guid>
      <description>求められるライブ設計力！ 私が勤めているソニックガーデンでは、ライブ設計力というものが求められます。 というのも、お客さんの要望を聞いている間に、ある程度自分の中でデータの構成を考えて、 ミーティング中に実装で必要な情報が揃っているのかを常に考えなければなりません。
ソニックガーデンでは、受託開発で 要件定義をしない ことを実践しています。毎週ミーティングをして、 その週に必要な開発だけを実装します 。そのため、
要望を聞く
↓
一度会社に戻ってタスクの見積もりを出す
↓
これでよいか顧客先に尋ねる
という流れを同じミーティング内でおこない、その場で設計ができていないといけません。
なぜ、この方法でうまくいくのか気になった人は弊社代表倉貫の著書に詳しく書かれていますのでご一読下さい。
「納品」をなくせばうまくいくソフトウェア業界の&amp;quot;常識&amp;quot;を変えるビジネスモデル
私は修行中の身で、技術的にも知らないことが多いです、そんな状態ではその場で構築していくライブ設計は難しいです。 ではどうやってライブ設計力を鍛えていくのかというと、そこで スパイク の登場です。
スパイクを打つとは スパイクはアジャイル開発や XP（エクストリームプログラミング）の用語なんですが、 もともとはロッククライミングの時に打ち付ける Spike（命綱を止めておくために岩に埋め込む金属）が由来だそうです。 ロッククライミングではスパイクを打つことでリスクを減らし、プログラミングでは技術的判断の見積もりのリスクを減らしてくれます。
プログラミングにおいて スパイクを打つ とは、簡単に説明するなら
タスク全工程の分からない（曖昧な）部分を無くしてから実装に取り掛かる
ただ、それだけです。
スパイクを打つ流れ スパイクを打つ際の流れを図にしてみました。それぞれを順に見ていきます。

(1)タスクのゴールを決める 最初にタスクのゴールを決めます。これは、以前の記事 認識合わせで注意したいこと(チケット管理のタスク編) で書いた、 チケット（タスク）作成者が何を実現しようとしているのかを理解する 必要があります。 このチケットで最終的に実現したいことができるようになるには？ を考えてゴールを決めます。
(2)タスクを分割 ゴールを決定したら次に、ゴールまでの実装を考えてみます。その中で　自分の触ったことのない技術だったり、実装方法が分からない 部分が存在するはずです、 その際は、 技術調査をおこない、簡単なサンプルプロジェクト等を作ったりして、実際に動くことを確認してみます。
この時に、 Qiita や StackOverflow にコードが載っていたからこれでいいやで終わらせると後で痛い目に会うかもしれません。 実際に動かしてみたり、自分の達成したい実装に変えた時にもちゃんと動くことを確認しないと調査は終わった という状況にしてはいけません。
調査を終えると、今まで 大きかったタスクも、何をすればいいのか明確になり、分割することが可能になる ので、 よりタスクを細かくして Unknown の部分がなくなるまでタスクをバラしていきます。 ロッククライミングで例えるならスパイクの打ち忘れは死をまねきます。 そんな、意気込みでタスクを分割するといいです。 目安としては、 ソニックガーデンでは実装するコードが思い描けている状態まで落としていきます。
この部分は、時間に追われていたりすると面倒な作業ですが、行き当たりばったりで実装していると、 途中で実装方法が無理だと気づいて大きな手戻りが発生する場合があるので、このような事態も防ぎたい です。</description>
    </item>
    
    <item>
      <title>ベンチャーで新卒が一人前になるということ</title>
      <link>https://blog.regonn.tokyo/programmer/2015-06-14-to-become-fully-qualified/</link>
      <pubDate>Sun, 14 Jun 2015 13:48:05 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2015-06-14-to-become-fully-qualified/</guid>
      <description>最初に このブログのアクセス解析をしていると、「新卒、ベンチャー」等の就活の内容を期待してこの記事を見に来る人が多くいるみたいです。 しかし、期待されている就活の内容とは少しズレてしまっているので、就活生向けに記事を書きました。よろしければこちらも読んでみてください。
就活中の皆様へ、ベンチャー企業のイメージが変わるかもしれないソニックガーデンを紹介します。
一人前になるとは？ 私が勤めているソニックガーデンは、ベンチャー企業ですが、中途採用だけでなく新卒も募集していて私は新卒第一号ということでジョインしました。
新卒で入る場合に弟子制度というものがあり、弟子の場合は師匠の下について日々修行を積み、他のメンバー全員が実力を認めることで 一人前になれて受託の案件が持てるようになったりします。
「修行」「弟子」「関門」「脱落」の謎を解け！　精鋭部隊が集まる採用の秘密
今まで私は一人前になるということは次のようなことだと思ってました。

試験であったり、何かの基準であったりを達成することで、 師匠に認められ、一人前になり色々任されることが増えて、「◯◯の役職になったから予算を多く扱える」 という企業の昇進と同じと思っていました。
しかし、このイメージが成り立つのは 大勢の人がいる企業で、各々の能力を管理するために必要 であって10人規模のベンチャー企業には当てはまりませんでした。
そもそも、ソニックガーデンには人事部なんて存在しませんし（というかプログラマしかいないし）。 、弟子が一人前かどうかを確かめるための試験であったり基準なんてものは、 求められるものが常に変化し続けるビジネスの世界では、そんなものは用意できない はずです。
つまり、このままの考えだと、 弟子でいつまでたっても 一人前になる基準がわからず業務をこなしていく ことになります。
何をしていけば一人前になれるのかがわからないので、五里霧中な状態でした。
一人前になる では、どうすれば一人前と認められるのでしょうか？ 答えは簡単でした。
一人前と認めざるをえない状態にしてしまう
ということなんです。
ソニックガーデンではプログラマを職人としてみますが（弟子制度と呼ばれているのもこの価値観からきています）。 、職人は一人前になる試験なんてありません。師匠が一人前と認めた時から一人前なのです。
認めざるをえない状態を作り出す では、その 認めざるをえない状態 にするにはどうしたらいいかというと、
ひたすら他の人（師匠クラス）の人達のチケット（タスク）を奪っていく
ただそれだけです。
最初の自分のイメージですと、一人前⇒できることが増える という順序になっていましたが、 実際は逆で できることを増やす⇒一人前 が成り立ちます。

つまり、 弟子と師匠という線引をせずにやってみる・参加してみて、できることを増やす ことが 一人前になるために必要な道なのだとわかりました。
もし任せて失敗をしたら？ しかし、この方法だと、失敗することだってよく起こります。 師匠がやっていることを弟子がやろうとしているので当たり前です。 時には取り返しのつかないような被害の大きい失敗もあるはずです。
ここでは、「失敗しないためには？」の話はしません。失敗は起きるものとして考えます。 もちろん、ベンチャーでメンバー同士のやっていることを把握できていれば、 危ない場合には師匠クラスや同僚の人達がサポートしてくれることもありますが、 以前、社長の倉貫さんが言ってくれたのは
「最後の砦として社長という人がいるのだから、失敗を恐れる必要はない」
という言葉でした。社長が「失敗しても最終的には私が謝るから恐れずいけ」という意気込みだからこそ、 弟子も師匠クラスの人達も攻めていけるのですね。
私も新卒で入社して、1年が経ちました。まだまだ師匠クラスへの道のりは長いと思いますが、 これからも、一人前になるために日々の業務を タスクを奪う というスタンスでこなしていきたいです。</description>
    </item>
    
    <item>
      <title>Rust言語で簡単なcatコマンドを実装してみた</title>
      <link>https://blog.regonn.tokyo/programmer/2014-12-31-rust-cat/</link>
      <pubDate>Wed, 31 Dec 2014 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-12-31-rust-cat/</guid>
      <description>2015年には1.0が公開される予定のRust言語の勉強のために、Unixコマンドを簡略化してRustで実装してみた。
すでに、uutils/coreutilsプロジェクトでcatコマンドは実装されていますが、今回はふつうのlinuxプログラミングという本のサンプルコードを参考にしました。
※ コードはここのレポジトリに公開するので、「もっとこう書けるよ」みたいなのがあれば、プルリクお願いします。
C言語でのcat #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt; static void do_cat(const char *path); static void die(const char *s); int main(int argc, char *argv[]) { int i; if (argc &amp;lt; 2) { fprintf(stderr, &amp;#34;%s: file name not given\n&amp;#34;, argv[0]); exit(1); } for (i = 1; i &amp;lt; argc; i++) { do_cat(argv[i]); } exit(0); } #define BUFFER_SIZE 2048  static void do_cat(const char *path) { int fd; unsigned char buf[BUFFER_SIZE]; int n; fd = open(path, O_RDONLY); if (fd &amp;lt; 0) die(path); for (;;) { n = read(fd, buf, sizeof buf); if (n &amp;lt; 0) die(path); if (n == 0) break; if (write(STDOUT_FILENO, buf, n) &amp;lt; 0) die(path); } if (close(fd) &amp;lt; 0) die(path); } static void die(const char *s) { perror(s); exit(1); } オプションとかは実装せず、ファイルの内容を読み取り標準出力する。</description>
    </item>
    
    <item>
      <title>振り返り(KPT)を振り返ることが重要と気づいた</title>
      <link>https://blog.regonn.tokyo/programmer/2014-12-23-kpt-2/</link>
      <pubDate>Tue, 23 Dec 2014 13:48:05 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-12-23-kpt-2/</guid>
      <description>私の働いている株式会社ソニックガーデンでは振り返り（KPT）を定期的に行います。 特に私のように新入社員は毎週先輩社員と一緒に振り返りを行っているんですが、入社してから半年以上が経過し、 最近は次のような問題が何回か発生しました。
 以前解決してTryまで落とせた問題が再び問題に出ている。 1人で1日毎の振り返りを考えてみても上手くできず、振り返りすることを避けようとしてしまう。  そもそも、振り返りを先輩社員と一緒に行う理由としては セルフマネジメントができて、1人で日々の振り返りを行えるようになり、常に改善を行える社会人としての基本的な能力を身につけること です。
振り返りをスポーツの練習として考えると次のように捉えることができます。
 日々の振り返り⇒基礎練 週末に先輩社員と行う振り返り⇒コーチ練習  理想は日々基礎練を行い鍛えることで、週末にはコーチ練を行って間違った（非効率）な練習をしていたら修正をしていく。
しかし、日々の振り返りができていないので、そんな状態でコーチ練に臨んでも、アドバイスなんかもらえる状態ではありませんでした。
この問題に対して、日々の振り返りを行うために大事なことは次のようなことだと思います。
過去の振り返りのロジックを確認する 振り返りで問題からトライにしていくには、筋の通った考え方（ロジック）が必要です。 しかし、なかなか先輩社員のようにロジカルに考えるのは難しいです。 だったら、 過去に行った振り返りを参考にして、先輩社員がどういうロジックで考えていたのかを確認してみましょう 。 スポーツで例えるなら上手い人の動画をみたりしてフォームを確認することで、自分も同じようにできるようになるはずです。
一度できたからといって継続できるとは限らない 「振り返りを行ってTryが出てきて、次の週には、見事改善されていた」ということは、よくあることです。 しかし、それが 本当に習慣化できているのか は、怪しいです。
くどいですがスポーツで例えると1度ボールを狙った場所に投げられたからといって、次も成功するとは限りません。 たまたま、ボールがいい方向に飛んだだけかもしれません。 しかし、 日々基礎練を行ってできたのであれば、それは試合でも使えるぐらいの武器になっているはず です。
過去の似たような問題で行われた先輩社員のロジックを何回も辿ってみて、自分でも似たような問題で使っていくことで徐々に体で覚えていき、自分の力になっていくのだと思います。
振り返りの結果をロジックと一緒に記録しておく 大事なロジックの部分を後で見返せるように、問題とトライだけでなく、 なぜそこに至ったのかも記録しておく必要があります。例えば振り返りで使ったホワイトボードを写真に撮っただけだと
 Problem:タスクの見積もりと実際かかった時間に大きく差があった Try：理由を説明できるなら大丈夫
 になっていたら、後で見返しても「なんでこうなったんだっけ？」となってしまします。そうならないためにも、 PとTは一緒に書いてしまう方がロジックが追いやすくなります。
 タスクの見積もりと実際にかかった時間に大きく差があったが実際はそこが問題なのではなく、 そもそも遅れることをタスクの担当者に連絡できていないのが問題だった。そうならないためにも、タスクが遅れそうであれば、 タスクの担当者に連絡し、なぜ遅れるのか(急なタスクが入った等)理由がちゃんと言えるのであれば、このような問題はおこらなかったはず。
 といった感じで文章で残しておくと後で見直したときに理解しやすいです。
最後に 振り返り（KPT）を振り返る。言葉的には紛らわしいですが、 何回も反復練習をすることで筋の通った考え方が身につければ日々の自分を成長させていけることができるのだと思います。 もう年末ですが来年もより成長してきたいです。</description>
    </item>
    
    <item>
      <title>同じ失敗を繰り返さないために〜振り返りの際に気をつけておきたい6のこと〜</title>
      <link>https://blog.regonn.tokyo/programmer/2014-11-03-kpt/</link>
      <pubDate>Mon, 03 Nov 2014 13:48:05 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-11-03-kpt/</guid>
      <description>私が働いている株式会社ソニックガーデンでは、弟子制度というのも取り入れていて、 私は現在弟子で修行中の身です（参考：「修行」「弟子」「関門」「脱落」の謎を解け！　精鋭部隊が集まる採用の秘密 - SonicGarden 株式会社ソニックガーデン)
プログラマとしてプログラミングスキルが大事なのは当たり前ですが、特にソニックガーデンでは振り返りに力を入れています。
自律的に現場を改善できるチームをつくるための「ふりかえり」の進め方 〜 KPTと進め方のノウハウ - Social Change!
細かい単位では、日々の日報での振り返りから、師匠と一緒に週毎の振り返り、社長と副社長と一緒に行う半年毎の振り返りなんかもあったりします。
そこで、特に私が今まで振り返りをしてきて大事だと感じたところを書いていきます。
振り返りの悪い例 例えば次のような振り返りがあったとします。
今日はタスクが時間内に終らなかったので、明日は時間を意識してタスクを行っていきます！
この振り返りを例にして修正していきたいと思います。順に追っていくと理解しやすいように書いています。
1. トライ（次にやること）を「〜します！」で終わらせない 「~します」をトライとして次の日以降に行おうとしても、大抵の場合は明日も同じように過ごし繰り返すことになります、 **意識するだけでは何も変わりません。トライは具体的にして、少しでも工夫をしていきます。**例えば今回の悪い例を直すとすると、
明日は実際に時間を計測して、どこに時間が多く取られているのかを確認します。
のようにすると、具体的に行動としてトライ（次にやること）に落とせました。 昨日とは少しでもいいから違うことをやってみる、「トライなのだから、また失敗して仕方ない」 そういう姿勢でいくと、改善するかもしれません。
2. 失敗原因はとことん追求（だけど責めないで） 最近読んだマッキンゼーの本 マッキンゼー流入社1年目問題解決の教科書 でも、この話題について書いてありました。常にイシュー（問題）は何かを考えてバリュー（価値）を出していくマッキンゼー。 コンサルティングのプロ達も問題を考える場合に次のことに注意しているみたいです。
 本来の「問題解決」とは、起こった事象に対処することではなく、「なぜ、その事象が起こったのか？本当は、どうあればその事象が起きないのか？」という問題の本質まで掘り下げて解決することです。
 悪い振り返り例を直すとしたら
 今日は電話応対が多く発生して、タスクに集中できませんでした。 お客さんから急にミーティングのアポが入り資料を作らなければいけませんでした。  になると、失敗の原因を追求できています。あと、ここで注意したいのは失敗した事を攻めるのではなく、 とにくかく原因をあげさせることだと思います。責められていると感じてしまっては、 今度問題が発生した時には「責められるので黙っていよう」という思考回路が出来上がる可能性もあるからです。
3. そもそも問題なのか？ よくある気付きとして「実は問題ではなかった」という話。
同じくマッキンゼーの本から引用で、
 気をつけなければいけないのは、問題解決には「私たちが注意を向けたところが活性化してしまう」という傾向があるということです。 相手が「この部分が問題なので解決したい」と言っていても、話を聞きながらも、意識のどこかで「真の問題が別にある可能性は？」というクリティカル思考も同時に働かせることも忘れてはいけません。
 ここでも悪い例から考えてみると、例えば3. で出てきた「電話応対」や「急な資料作り」といった、 どうしても対応しなければならないときに他のタスクが進まないのは仕方ないこともあります。 （電話応対を他の人にやってもらう等も対処法ですが、話が複雑になってしまうので今回は考えません）
では、どこに問題があったのか？
急なタスクが入ったにも関わらず、先輩や周りに報告をしておらず、進捗が見える状態になっていなかったので誰も手伝えなかった
という新たな問題がわかりました。つまり
連絡ができていたのならば「タスクが終らなかった」は問題ではなくて
 進捗が見える状態になっていなかった 報告できる体制が整っていなかった  というのが、より根本的な問題だったということになります。
4. そもそもの目的を思い出す では「そもそも問題なのか」を考えましたが、今度は「そもそも何を達成するためだっけ？」と考えます。 今回の悪い振り返りの例だったら、次の様に考えていきます。  「そもそも、なんでそのタスクを終わらせなきゃいけないの？」</description>
    </item>
    
    <item>
      <title>認識合わせで注意したいこと(チケット管理のタスク編)</title>
      <link>https://blog.regonn.tokyo/programmer/2014-09-28-recognition-alignment-ticket/</link>
      <pubDate>Sun, 28 Sep 2014 13:48:05 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-09-28-recognition-alignment-ticket/</guid>
      <description>新米プログラマーです。前回は認識合わせで注意したいこと（ウェブページ編）で記事を書きましたが、今回はチケット管理されているタスクでの認識合わせについて書いていきます。 チケットでの管理も、一度書き込むと相手の返答を待たないといけない場合もあるので、なるべく簡潔に早く認識合わせをして、タスクに取り組みたいですね。
1. チケット作成者が何を実現しようとしているのかを理解する チケット管理でタスクをやってると、チケットのタスク説明がメモ程度にタスクが登録されている場合もあります。
 〇〇がしたい △△を消す等  これだけの、情報でタスクを始めてしまって、完成してから「そこまでやる必要なかったのに」など、余計なタスクをしてしまう事を防ぎたいです。 相手が何を実装しようとしているのかをしっかり理解してから、タスクに取り組む ために、チケットのコメント機能で疑問がなくなるように、やり取りをしておきましょう。
私）〇〇は全ユーザが使えるようにしますが、いいですか？ チケット作成者）〇〇は試験的に取り入れてから全体に公開したいので、ひとまずアドミン権限のユーザだけでいいです
等のやり取りができれば、よりタスクが具体的にできます。
2. タスクを共有しておく 疑問点がなくなったら、今度はタスクの内容を書いて共有しておくと、自分が何をしようとしているのかを周りが把握できるので相手に安心感が生まれます。
書くときには、ある程度大雑把にタスクの内容を書いてしまってだいじょうぶです。細かく書いてしまうと、より良い実装を思いついた時に逐次確認するのも時間がかかってしまうためです。 方向性がブレていない事を確認してもらうぐらいの気持ち いておきます。大幅にタスク内容が変わる時だけ連絡しておけば「〇〇で実装するって言ってなかったっけ？」と相手から確認されなくなります。
3. 他のメンバーの情報を聞いてみる チケット管理しているということは他の人と共同で進めていると思いますが、自分の知らない知識を周りに求める ことも必要です。
私）□□apiを使って実装しますけど、他のプロジェクトで使われている部分ありますか？ 他のメンバー) ☆☆のプロジェクトで実装されてるから、参考になるかも
等の情報が手に入れば、1からapiのドキュメンとを読んでいくより早く実装できるはず。 しかも、apiの仕様が変更している場合などには他のプロジェクトで指摘してあげるなど貢献することもできます。</description>
    </item>
    
    <item>
      <title>認識合わせで注意したいこと(ウェブページ編)</title>
      <link>https://blog.regonn.tokyo/programmer/2014-09-21-recognition-alignment/</link>
      <pubDate>Sun, 21 Sep 2014 13:48:05 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-09-21-recognition-alignment/</guid>
      <description>4月に新卒で入った会社もそろそろ半年が経とうとしていて、私にも色々なタスクが振られるようになってきました。 タスクを進めていく上で、どんな時でも認識合わせは必要になると思います。 今回はウェブページ編集タスクでの認識合わせを行うときに意識する基本的なことをまとめておきました。
なるべく認識合わせを行い、**手戻り（認識の齟齬）**が発生しないようにしていきたいです。
1. 状況（物理的距離・信頼度）によって認識合わせの方法は変わる もちろん、これを行えば良いという銀の弾丸は存在しませんが、状況を分けることで少し方法が定まってくると思います。 物理的距離 と 信頼度 による場合分けをしてみました。どの状況でも大事な事は、 なるべく相手の承認を得るまでの自分の作業量を少なくする（最短経路を通る）事 です。

1.1信頼度が低い（初めてのお客さん）・距離が遠い（ウェブ上でのみ対応）の場合 完成図をスクリーンショットで作成する。注意したいのは、 ChromeやFirefox（もちろんIEでも）のデバッグ機能でスタイルシートの値だけを編集したり、HTMLタグを移動する等して、HTMLファイルをいじろうとしないことです。 HTMLを編集してしまうと、完成図をみせてから、「う〜ん違うな〜」と言われてしまったら、 その都度HTMLを作っていかないといけません。なるべく最小限の作業量で、まず了承を取ってから取り掛かった方がやりやすいです。
1.2信頼度が高い（既に何回かやりとりしてる人）・距離が遠い場合 既に相手の人柄が分かっている場合などは、Skype等で画面共有をしながら、 了解を得るのが適切だと思います。画像をいちいち作ってやり取りをするより、ここでもブラウザ上でやるとスムーズです。
1.3信頼度が低い・距離が近い 初めてのお客さんとオフィスで話す場合などには、先に全体の画面をホワイトボードに書いておいたり準備しておくと、 お客さんも理解しやすいし、確認漏れも減ると思います。ただし、ホワイトボードだけだと実際の画面とイメージが異なることもあるので、 その後に作ってる途中で確認するとより確実になります。
1.4信頼度が高い・距離が近い 近くにいるなら、ホワイトボードに画面を書くなどして、ぱぱっと話をして決めてしまうのが楽です。 しかし、後で認識のズレがあると大変なので、決めたことは一度文章にして相手にも共有しておくと、確認してもらえるはず。
2. 実際に質問をするときに気をつけること ここからは実際に質問をする（資料を作るとき）に注意していくことを書いていきます。
2.1相手にどこに注目させたいかを分かりやすく Before・Afterの画面を用意するとわかりやすいですが、さらにどこを変更したのかを書いておくと、 相手がすぐに気がついて、相手の作業量も減ります。 EvernoteのSkitchを使うと、 スクリーンショットで矢印や四角で囲むことができるので目立たせやすいです。

2.2相手への質問をひとつの文にまとめようとしない 例えば
「Aの画面とBの画面を新しく作りましたが、Aの一部は今後必要なくなるので削除して構わないと思いますし、 Bではもうすこし明るい色がマッチすると思うのですがどうでしょうか？」
という質問（日本語が変なのは無視して下さい）をされて、質問をされた方はAについてコメントすればいいのか、 Bの改良点について話せば良いのか分からない状態になってしまいます。
相手への質問は質問毎に分ける等して相手に何の回答を要求しているのか分かるようにすると相手も困らないです。
&amp;mdash;&amp;ndash; 修正後 &amp;mdash;&amp;mdash;
画面AとBを作成しました。次の事を確認させて下さい。
 Aの一部は今後必要なくなるので、削除して構いませんか？ Bはもうすこし明るい色がマッチしていると思うのですがどうでしょうか？  と質問すれば、相手も2つの項目について回答してくれるはずです。
3. 最後に 他の職業でも言えることですが、プログラマーにとってプログラミング技術以外にも認識の共有は大切で、 いくら早く作業ができるたとしても、違うものがアウトプットで出てきたら、意味が無い ですね。 ちゃんと認識を共有しながら求めてられているものを素早く作っていけるようになりたいです。
追記： 認識合わせ チケットタスク管理編についても書きました。</description>
    </item>
    
    <item>
      <title>やっぱり目的が大事だよね【振り返り後】</title>
      <link>https://blog.regonn.tokyo/programmer/2014-09-07-goal/</link>
      <pubDate>Sun, 07 Sep 2014 13:48:05 +0000</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-09-07-goal/</guid>
      <description>会社の個人振り返りで、目的を意識していないと注意されて、色々考えたら腑に落ちて、 「やっぱり目的大事」と再認識したので考えた事をまとめておきます。
夢から考えるから混乱する よく将来の目標とかを聞かれますが、人生の目標から考えて逆算して「今、何をするか」を考えるって、 結構難しい。おそらく最初から夢がある人って少数派だと思いますし、新しい概念を知って夢が変わるって仕方がないことなんだと思います。 なので、夢を目的から順に考えてみると考えやすくなる のではないでしょうか。 自分の行動の目的を順に考えていったら最終的な自分の一番大事な価値に気付くことができて、 夢も気付くのかもしれないですし、その価値さえ揺るがなければ夢は変わっても目的は達成されはるずです。
プロジェクトでは目的を共有しているからこそ、当事者意識が生まれる ここでは、働く視点で考えてみます。チームで何かしらのプロジェクトを行うにしても目的が曖昧になってしまうと、 何をやればいいのか曖昧だし、誰もタスクを行わずに放置されてしまうことがあります。 しかし、目的が決まっていて全員が納得して共有できているならば、今の自分が何をすれば、その目的を達成するために貢献できるかという事を考え、それが当事者意識につながるのだと思います。
私は、大企業よりもベンチャーで働くことが好きです。 少人数だと目的が共有されている状態が続きやすいし、積極的に目的を達成するために自分でできる事を探せます。 私が入社したソニックガーデンという会社では、会社の規模を急激に大きくすることはせずに、人数が大きくなっても、 暖簾分けのようにして小さい会社を分散していくという考えで事業を行っていて、そこも気に入っている部分です。
ブログを書く目的 ちなみに、このブログを書く目的は
 会社で行っている個人の振り返りを忘れないように 論理的に考えることが苦手なので、考えを整理して書く練習 ソニックガーデンで実践していることを文章にして多くの方に知ってもらう  です。</description>
    </item>
    
    <item>
      <title>山括弧　＜　＞　(小なり,大なり)　が正規表現でマッチしなかった場合</title>
      <link>https://blog.regonn.tokyo/programmer/2014-07-06-match-lt-gt/</link>
      <pubDate>Sun, 06 Jul 2014 09:41:28 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-07-06-match-lt-gt/</guid>
      <description>JavaScriptで文章中のタグに使われている山括弧 &amp;lt; &amp;gt; を消したいために replace(/&amp;gt;/g,&#39; &#39;) と書いてもマッチしてくれなかった。 replace(/\&amp;gt;/g,&#39; &#39;) でエスケープしてもだめだった。
検索で調べても山括弧って言葉自体はじめて知ったし。Googleの検索とかは記号は弾かれてしまって解決に苦労した。
悪意のあるコード等を入力フォームに入力されても、実行されないようにホームページではサニタイズされていて&amp;lt; &amp;gt;は&amp;amp;lt; &amp;amp;gt;に変換されていたみたい。
replace(/&amp;amp;gt;/g,&#39; &#39;) でマッチしてくれた。</description>
    </item>
    
    <item>
      <title>株式会社ソニックガーデンに入社しました</title>
      <link>https://blog.regonn.tokyo/programmer/2014-04-09-sonic-garden/</link>
      <pubDate>Wed, 09 Apr 2014 13:48:05 +0900</pubDate>
      
      <guid>https://blog.regonn.tokyo/programmer/2014-04-09-sonic-garden/</guid>
      <description>4月1日から、株式会社ソニックガーデンで働くことになりました。ソニックガーデンを知らない人のために、 簡単な説明をしますと、ITベンチャーで、今までIT業界内で主流だったビジネスモデルを変えていこうとしている会社です。
ソニックガーデンを知ったのはGunosyで社長の倉貫さんの記事を読んで、自分の求めている理想の会社に近く、とても魅力的に感じました。
私が理想とする会社とは一生プログラマとして、活躍していける会社です。 大学4年生の時に、大学でシリコンバレーに行く機会があり、そこでは、モデルを目指してアメリカに来たけど無理だったからプログラマになった人や、 RealOnePlayerの開発者で日本語がペラペラなRubyプログラマなど、色々なプログラマの人と会ってプログラマという職業の面白さを知りました。
さらに、「アメリカでは プログラマは一生プログラマとして働くことができて、プログラマとしての地位が上がっていく」という話を聞いて、 日本のようにプログラマは企業の新人がなり、徐々に上流工程になっていきプログラミングから離れていってしまうキャリアパスとは違うなと感じました。
しかし、ソニックガーデンには生涯プログラマとして活躍できる環境が整っており、そのような働き方を広めていこうとしている会社で、 ここで働いてみたいと思い、中途採用しか募集していないにもかかわらず、インターンとして働かせてもらいながら、 大学を卒業後、新卒として採用してもらいました。
投資を受けずに会社の規模を急激に大きくしないスタンス や、新しい技術は積極的に取り入れていく等も自分の思想と近く、 技術力の高い人達に囲まれているの で職場としては最高の環境だと思います。
ここまでは真面目（面接の志望理由みたい）に話を書いてきましたが、 こんな感じで「最高の仕事だ！」「ここで働くことで社会を変えていける！」とか言っている人ほど案外早く転職したりするイメージがあり、 周りの友達が「入った会社がブラックだった」と転職活動をしている、今日このごろを考えると、 社会というものは想像以上に厳しいのかもしれません。
新卒なのに勢いが無いと言われるかもしれませんが、自分としてはしっかりとプログラミングの技術を学んで、 着実に成長していくことで、社会と会社に貢献していくような人材になっていきたいです。
倉貫さんのブログで入社式の社長訓話が書かれています 新入社員へのメッセージ 〜 あなたの未来を広げる３つの約束 | Social Change!</description>
    </item>
    
  </channel>
</rss>